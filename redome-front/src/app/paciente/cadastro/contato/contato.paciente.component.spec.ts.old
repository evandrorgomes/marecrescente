import { FakeLoader } from './../../../shared/fake.loader';
import { AppComponent } from './../../../app.component';
import { AppModule } from './../../../app.module';
import { CommonModule } from '@angular/common';
import { Injector } from '@angular/core/src/di';
import { TranslateService } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { HelperTest } from './../../../shared/helper.test';
import { CepCorreioService } from './../../../shared/cep.correio.service';
import { ContatoPacienteComponent } from './contato.paciente.component';
import { PacienteConstantes } from './../../paciente.constantes';
import { Observable } from 'rxjs';
import { DominioService } from './../../../shared/dominio/dominio.service';
import { MockBackend } from '@angular/http/testing';
import { Pais } from './../../../shared/dominio/pais';
import { CepCorreio } from './../../../shared/cep.correio';
import { HttpClient } from './../../../shared/httpclient.service';
import { HttpModule, XHRBackend, Response, ResponseOptions, Http, ConnectionBackend, RequestOptions, BaseRequestOptions } from '@angular/http';
import { CadastroComponent } from './../cadastro.component';
import { CadastroModule } from './../cadastro.module';
import { TestBed, async, inject, getTestBed, ComponentFixture } from '@angular/core/testing';
import { FormsModule, FormBuilder, FormGroup, ReactiveFormsModule } from "@angular/forms";
import { MockConnection } from "@angular/http/testing";

describe('ContatoPacienteComponent', () => {
  let fixtureApp: ComponentFixture<AppComponent>;
  let app: AppComponent;
  let fixture: ComponentFixture<ContatoPacienteComponent>;
  let component: ContatoPacienteComponent
  let _mockBackend: any;
  let helperTest: HelperTest;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [AppModule, CadastroModule,
        TranslateModule.forChild({
          loader: {
            provide: TranslateLoader, 
            useClass: FakeLoader
          }
        })
      ],
      providers: [DominioService, CepCorreioService, {provide: XHRBackend, useClass: MockBackend}]
    }).compileComponents()
    .then(()=> {
       fixtureApp = TestBed.createComponent(AppComponent);
       app = fixtureApp.debugElement.componentInstance;
    });
  }));

  beforeEach(inject([XHRBackend, FormBuilder, DominioService, CepCorreioService, TranslateService], (backend: MockBackend, fb: FormBuilder, service:DominioService, correioService:CepCorreioService, translate: TranslateService ) => {
    _mockBackend = backend;
    helperTest = new HelperTest();
    helperTest.criarMockDominio(_mockBackend);
    component = new ContatoPacienteComponent(fb, service, correioService, translate);   
    component.ngOnInit();
  }));

  afterEach(() => {
      helperTest = undefined;
      _mockBackend = undefined;
      fixtureApp = undefined;
      app = undefined;
      component = undefined;
  });

  it('deveria criar o ContatoPacienteComponent', () => {
    expect(component).toBeTruthy();
  });

it('deve exibir a mensagem \'CEP é obrigatório\' caso o país seja Brasil e o CEP seja vazio',  async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["cep"].setValue('')

  component.isValid();
  
  expect('O campo CEP é obrigatório').toEqual(component.formErrors['cep']);

}));

it('não deve exibir mensagem de erro caso o país seja Brasil e o CEP seja preenchido', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["cep"].setValue('20756120')

  component.isValid();
  expect('').toEqual(component.formErrors['cep']);
}));

it('deve exibir a mensagem \'Tipo Logradouro é obrigatório\' caso o país seja Brasil e o tipo logradouro seja vazio',
  async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["tipoLogradouro"].setValue('')

  component.isValid();
  expect('O campo Tipo de Logradouro é obrigatório').toEqual(component.formErrors['tipoLogradouro']);
}));

it('não deve exibir mensagem de erro caso o país seja Brasil e o tipo logradouro seja preenchido', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["tipoLogradouro"].setValue('Rua')

  component.isValid();
  expect(component.formErrors['tipoLogradouro']).toEqual('');
}));

it('deve exibir a mensagem \'Nome do Logradouro é obrigatório\' caso o país seja Brasil e o nome do logradouro seja vazio',
  async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["nomeLogradouro"].setValue('')

  component.isValid();
  expect('O campo Nome do Logradouro é obrigatório').toEqual(component.formErrors['nomeLogradouro']);
}));

it('não deve exibir mensagem de erro caso o país seja Brasil e o nome do logradouro seja preenchido', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["nomeLogradouro"].setValue('Goiás')

  component.isValid();
  expect('').toEqual(component.formErrors['nomeLogradouro']);
}));

it('deve exibir a mensagem \'Bairro é obrigatório\' caso o país seja Brasil e o bairro seja vazio', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["bairro"].setValue('')

  component.isValid();
  expect('O campo Bairro é obrigatório').toEqual(component.formErrors['bairro']);
}));

it('não deve exibir mensagem de erro caso o país seja Brasil e o bairro seja preenchido', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["bairro"].setValue('Piedade')

  component.isValid();
  expect('').toEqual(component.formErrors['bairro']);
}));

it('deve exibir a mensagem \'Município é obrigatório\' caso o país seja Brasil e o município seja vazio', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["municipio"].setValue('')

  component.isValid();
  expect('O campo Município é obrigatório').toEqual(component.formErrors['municipio']);
}));

it('não deve exibir mensagem de erro caso o país seja Brasil e o município seja preenchido', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["municipio"].setValue('Belo Horizonte')

  component.isValid();
  expect('').toEqual(component.formErrors['municipio']);
}));

it('deve exibir a mensagem \'UF é obrigatório\' caso o país seja Brasil e a UF seja vazia', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["uf"].setValue('')

  component.isValid();
  expect('O campo UF é obrigatório').toEqual(component.formErrors['uf']);
}));

it('não deve exibir mensagem de erro caso o país seja Brasil e a UF seja preenchida', async(() => {

  let enderecoForm =  component.enderecoForm
  let paisFormGroup = <FormGroup> enderecoForm.controls["pais"]
  paisFormGroup.controls["id"].setValue(PacienteConstantes.BRASIL_ID)
  enderecoForm.controls["uf"].setValue('RJ')

  component.isValid();
  expect('').toEqual(component.formErrors['uf']);
}));

});