INSERT INTO "MODRED"."TIPO_TAREFA" (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TARE_IN_SOMENTE_AGRUPADOR) VALUES ('62', 'CADASTRAR_RESULTADO_EXAME', '0', '0');
ALTER TABLE MODRED.GENOTIPO 
ADD (DOAD_ID NUMBER );

CREATE INDEX IN_FK_GENO_DOAD ON MODRED.GENOTIPO (DOAD_ID);

CREATE INDEX IN_FK_GENO_PACI ON MODRED.GENOTIPO (PACI_NR_RMR);

ALTER TABLE MODRED.GENOTIPO
ADD CONSTRAINT FK_GENO_DOAD FOREIGN KEY
(
  DOAD_ID 
)
REFERENCES MODRED.DOADOR
(
  DOAD_ID 
)
ENABLE;

ALTER TABLE MODRED.GENOTIPO
ADD CONSTRAINT FK_GENO_PACI FOREIGN KEY
(
  PACI_NR_RMR 
)
REFERENCES MODRED.PACIENTE
(
  PACI_NR_RMR 
)
ENABLE;

COMMENT ON COLUMN MODRED.GENOTIPO.PACI_NR_RMR IS 'Identificador do paciente';

COMMENT ON COLUMN MODRED.GENOTIPO.DOAD_ID IS 'Identificador do doador';


-- INCLUSÃO DE UM NOVO REGISTRO / NMPD
INSERT INTO MODRED.REGISTRO (REGI_ID, REGI_TX_NOME, PAIS_ID) VALUES (2, 'NMPD', 68);
COMMIT;


-- ADICIONANDO FLAG INDICANDO QUE O CADASTRO VEIO DO EMDIS
ALTER TABLE MODRED.DOADOR
ADD DOAD_IN_EMDIS NUMBER;
COMMENT ON COLUMN MODRED.DOADOR.DOAD_IN_EMDIS IS 'Indica se o cadastro do doador internacional veio do EDMIS ou não.';

ALTER TABLE MODRED.DOADOR_AUD
ADD DOAD_IN_EMDIS NUMBER;


-- RECURSO PARA SOLICITAR PEDIDO DE FASE 2 INTERNACIONAL
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) 
VALUES (94, 'SOLICITAR_PEDIDO_FASE_2_INTERNACIONAL', 'Permite ao usuario solicitar um pedido de exame fase 2 para um doador internacional.');

-- E A PERMISSÃO PARA O ANALISTA DE BUSCA
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (94, 5, 0);
COMMIT;




-----------------------------Criando genotipo de doador e alterando de paciente

ALTER TABLE MODRED.GENOTIPO RENAME TO GENOTIPO_PACIENTE;
ALTER TABLE MODRED.VALOR_GENOTIPO RENAME TO VALOR_GENOTIPO_PACIENTE;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA RENAME TO VALOR_GENOTIPO_BUSCA_PACIENTE;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPANDIDO RENAME TO VALOR_GENOTIPO_EXPAND_PACIENTE;

ALTER TABLE MODRED.GENOTIPO_PACIENTE DROP CONSTRAINT FK_GENO_DOAD;
ALTER TABLE MODRED.GENOTIPO_PACIENTE DROP COLUMN DOAD_ID;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE DROP CONSTRAINT FK_VGEE_DOAD;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE DROP COLUMN DOAD_ID;

ALTER TABLE MODRED.GENOTIPO_PACIENTE RENAME COLUMN GENO_ID TO GEPA_ID;
ALTER TABLE MODRED.GENOTIPO_PACIENTE RENAME COLUMN GENO_DT_ALTERACAO TO GEPA_DT_ALTERACAO;
ALTER TABLE MODRED.GENOTIPO_PACIENTE RENAME COLUMN GENO_IN_EXCLUIDO TO GEPA_IN_EXCLUIDO;

ALTER INDEX MODRED.IN_FK_GENO_PACI RENAME TO IN_FK_GEPA_PACI;
ALTER INDEX MODRED.IN_PK_GENO RENAME TO IN_PK_GEPA;
ALTER TABLE MODRED.GENOTIPO_PACIENTE RENAME CONSTRAINT PK_GENO TO PK_GEPA;
ALTER TABLE MODRED.GENOTIPO_PACIENTE RENAME CONSTRAINT FK_GENO_PACI TO FK_GEPA_PACI;


ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME COLUMN VAGB_ID TO VGBP_ID;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME COLUMN VAGB_NR_POSICAO TO VGBP_NR_POSICAO;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME COLUMN VAGB_NR_TIPO TO VGBP_NR_TIPO;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME COLUMN VAGB_TX_VALOR TO VGBP_TX_VALOR;
ALTER INDEX MODRED.IN_FK_VAGB_GENO RENAME TO IN_FK_VGBP_GENO;
ALTER INDEX MODRED.IN_FK_VAGB_LOCU RENAME TO IN_FK_VGBP_LOCU;
ALTER INDEX MODRED.VALOR_GENOTIPO_BUSCA_PK RENAME TO IN_PK_VGBP;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME CONSTRAINT PK_VAGB TO PK_VGBP;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME CONSTRAINT FK_VAGB_GENO TO FK_VGBP_GENO;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME CONSTRAINT FK_VAGB_LOCU TO FK_VGBP_LOCU;




ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME COLUMN VGEE_ID TO VGEP_ID;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME COLUMN VGEE_NR_POSICAO TO VGEP_NR_POSICAO;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME COLUMN VGEE_TX_VALOR TO VGEP_TX_VALOR;
ALTER INDEX MODRED.IN_FK_GENO_ID RENAME TO IN_FK_VGEP_GENO;
ALTER INDEX MODRED.IN_FK_LOCU_ID RENAME TO IN_FK_VGEP_LOCU;
ALTER INDEX MODRED.IN_FK_VGEE_PACI RENAME TO IN_FK_VGEP_PACI;
ALTER INDEX MODRED.IN_PK_VGEE RENAME TO IN_PK_VGEP;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME CONSTRAINT PK_VGEE TO PK_VGEP;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME CONSTRAINT FK_VGEE_GENO TO FK_VGEP_GENO;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME CONSTRAINT FK_VGEE_LOCU TO FK_VGEP_LOCU;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME CONSTRAINT FK_VGEE_PACI TO FK_VGEP_PACI;




ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME COLUMN VAGE_TX_ALELO TO VAGP_TX_ALELO;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME COLUMN VAGE_NR_POSICAO_ALELO TO VAGP_NR_POSICAO_ALELO;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME COLUMN VAGE_NR_TIPO TO VAGP_NR_TIPO;
ALTER INDEX MODRED.IN_FK_VAGE_GENO RENAME TO IN_FK_VAGP_GENO;
ALTER INDEX MODRED.IN_PK_VAGE RENAME TO IN_PK_VAGP;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME CONSTRAINT PK_VAGE TO PK_VAGP;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME CONSTRAINT FK_VAGE_GENO TO FK_VAGP_GENO;




CREATE TABLE MODRED.GENOTIPO_DOADOR
(
  GEDO_ID NUMBER NOT NULL 
, GEDO_DT_ALTERACAO TIMESTAMP(6) 
, GEDO_IN_EXCLUIDO NUMBER(1, 0) DEFAULT 0 NOT NULL 
, DOAD_ID NUMBER 
, CONSTRAINT PK_GEDO PRIMARY KEY (GEDO_ID )
);



ALTER TABLE MODRED.GENOTIPO_DOADOR  MODIFY (DOAD_ID NOT NULL);
ALTER INDEX MODRED.PK_GEDO RENAME TO IN_PK_GEDO;
CREATE INDEX MODRED.IN_FK_GEDO_DOAD ON MODRED.GENOTIPO_DOADOR (DOAD_ID);
ALTER TABLE MODRED.GENOTIPO_DOADOR ADD CONSTRAINT FK_GEDO_DOAD FOREIGN KEY (DOAD_ID) REFERENCES MODRED.DOADOR (DOAD_ID) ENABLE;
COMMENT ON TABLE MODRED.GENOTIPO_DOADOR IS 'Tabela de genotipo de doadores';
COMMENT ON COLUMN MODRED.GENOTIPO_DOADOR.GEDO_ID IS 'Identificador do genotipo de doador';
COMMENT ON COLUMN MODRED.GENOTIPO_DOADOR.GEDO_DT_ALTERACAO IS 'Data de alteração do genotipo';
COMMENT ON COLUMN MODRED.GENOTIPO_DOADOR.GEDO_IN_EXCLUIDO IS 'Se genotipo foi excluido ou não';
COMMENT ON COLUMN MODRED.GENOTIPO_DOADOR.DOAD_ID IS 'Chave estrangeira de doador';





CREATE TABLE MODRED.VALOR_GENOTIPO_BUSCA_DOADOR
(
  VGBD_ID NUMBER NOT NULL 
, LOCU_ID VARCHAR2(10 BYTE) NOT NULL 
, VGBD_NR_POSICAO NUMBER NOT NULL 
, VGBD_NR_TIPO NUMBER NOT NULL 
, GENO_ID NUMBER NOT NULL 
, VGBD_TX_VALOR VARCHAR2(10 BYTE) NOT NULL 
, CONSTRAINT PK_VGBD PRIMARY KEY 
  (
    VGBD_ID 
  ));


COMMENT ON TABLE MODRED.VALOR_GENOTIPO_BUSCA_DOADOR IS 'Tabela de valores de genótipo com a coluna de valores reduzida ';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_BUSCA_DOADOR.VGBD_ID IS 'Chave primária de valor genótipo busca';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_BUSCA_DOADOR.LOCU_ID IS 'Chave para tabela de lous ';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_BUSCA_DOADOR.VGBD_NR_POSICAO IS 'Numero da posição do locus ';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_BUSCA_DOADOR.VGBD_NR_TIPO IS '0- para sorologia, 1- para antígeno, 2- NMDP, 3- Grupo G, 4-  Grupo P e 5 Alelo';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_BUSCA_DOADOR.GENO_ID IS 'Referência de genótipo ';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_BUSCA_DOADOR.VGBD_TX_VALOR IS 'Valor de resultado de HLA';






ALTER INDEX MODRED.PK_VGBD RENAME TO IN_PK_VGBD;

CREATE INDEX MODRED.IN_FK_VGBD_GENO ON VALOR_GENOTIPO_BUSCA_DOADOR (GENO_ID);

CREATE INDEX MODRED.IN_FK_VGBD_LOCU ON VALOR_GENOTIPO_BUSCA_DOADOR (LOCU_ID);

ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_DOADOR
ADD CONSTRAINT FK_VGBD_GENO FOREIGN KEY
(
  GENO_ID 
)
REFERENCES MODRED.GENOTIPO_DOADOR
(
  GEDO_ID 
)
ENABLE;

ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_DOADOR
ADD CONSTRAINT FK_VGBD_LOCU FOREIGN KEY
(
  LOCU_ID 
)
REFERENCES MODRED.LOCUS
(
  LOCU_ID 
)
ENABLE;


ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_DOADOR RENAME COLUMN GENO_ID TO GEDO_ID;

ALTER INDEX IN_FK_VGBD_GENO RENAME TO IN_FK_VGBD_GEDO;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_DOADOR RENAME CONSTRAINT FK_VGBD_GENO TO FK_VGBD_GEDO;








CREATE TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR
(
  VGED_ID NUMBER NOT NULL 
, VGED_NR_POSICAO NUMBER NOT NULL 
, VGED_TX_VALOR NUMBER NOT NULL 
, LOCU_ID VARCHAR2(10 BYTE) NOT NULL 
, GENO_ID NUMBER NOT NULL 
, DOAD_ID NUMBER 
, CONSTRAINT PK_VGED PRIMARY KEY 
  (VGED_ID )
);



ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR RENAME COLUMN GENO_ID TO GEDO_ID;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR  MODIFY (DOAD_ID NOT NULL);
ALTER INDEX MODRED.PK_VGED RENAME TO IN_PK_VGED;
CREATE INDEX MODRED.IN_FK_VGED_DOAD ON VALOR_GENOTIPO_EXPAND_DOADOR (DOAD_ID);
CREATE INDEX MODRED.IN_FK_VGED_GEDO ON VALOR_GENOTIPO_EXPAND_DOADOR (GEDO_ID);
CREATE INDEX MODRED.IN_FK_VGED_LOCU ON VALOR_GENOTIPO_EXPAND_DOADOR (LOCU_ID);
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR
ADD CONSTRAINT FK_VGED_DOAD FOREIGN KEY
(
  DOAD_ID 
)
REFERENCES MODRED.DOADOR
(
  DOAD_ID 
)
ENABLE;

ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR
ADD CONSTRAINT FK_VGED_GEDO FOREIGN KEY
(
  GEDO_ID 
)
REFERENCES MODRED.GENOTIPO_DOADOR
(
  GEDO_ID 
)
ENABLE;

ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR
ADD CONSTRAINT FK_VGED_LOCU FOREIGN KEY
(
  LOCU_ID 
)
REFERENCES MODRED.LOCUS
(
  LOCU_ID 
)
ENABLE;

COMMENT ON TABLE MODRED.VALOR_GENOTIPO_EXPAND_DOADOR IS 'Tabela de genotipo expandido do doador, guarda a primeira parte do alelo.';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_DOADOR.VGED_ID IS 'Identificador do genotipo expandido de doador';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_DOADOR.VGED_NR_POSICAO IS 'posição do alelo';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_DOADOR.VGED_TX_VALOR IS 'valor do alelo';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_DOADOR.LOCU_ID IS 'locus';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_DOADOR.GEDO_ID IS 'id do genotipo do doador';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_DOADOR.DOAD_ID IS 'id do doador';



CREATE TABLE MODRED.VALOR_GENOTIPO_DOADOR
(
  EXAM_ID NUMBER NOT NULL 
, LOCU_ID VARCHAR2(4 BYTE) NOT NULL 
, VAGD_TX_ALELO VARCHAR2(20 BYTE) NOT NULL 
, VAGD_NR_POSICAO_ALELO NUMBER(1, 0) NOT NULL 
, VAGD_NR_TIPO NUMBER 
, GEDO_ID NUMBER 
) ;



ALTER TABLE MODRED.VALOR_GENOTIPO_DOADOR
ADD CONSTRAINT FK_VAGD_GENO FOREIGN KEY
(
  GEDO_ID 
)
REFERENCES MODRED.GENOTIPO_DOADOR
(
  GEDO_ID 
)
ENABLE;

COMMENT ON TABLE MODRED.VALOR_GENOTIPO_DOADOR IS 'Tabela de genótipos por paciente. Armazena os locus exame, 
com os valores alélicos de maior resolução, associados ao exames já conferidos (status aceito) para o paciente.';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_DOADOR.EXAM_ID IS 'Identificador para a tabela de exame.';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_DOADOR.LOCU_ID IS 'Identificador para a tabela de locus.';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_DOADOR.VAGD_TX_ALELO IS 'Valor do alelo com maior resolução.';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_DOADOR.VAGD_NR_POSICAO_ALELO IS 'Posição do valor alelo dentro do locus/exame, 
se é referente ao primeiro ou segundo alelo.';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_DOADOR.VAGD_NR_TIPO IS '0- para sorologia, 1- para antígeno, 2- NMDP, 3- Grupo G, 4-  Grupo P e 5 Alelo';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_DOADOR.GEDO_ID IS 'Referência para tabela pai de genótipo';


CREATE INDEX MODRED.IN_FK_VAGD_GEDO ON MODRED.VALOR_GENOTIPO_DOADOR (GEDO_ID);

ALTER TABLE MODRED.VALOR_GENOTIPO_DOADOR
ADD CONSTRAINT PK_VAGD PRIMARY KEY 
(
  EXAM_ID 
, LOCU_ID 
, VAGD_NR_POSICAO_ALELO 
)
USING INDEX 
(
    CREATE UNIQUE INDEX IN_PK_VAGD ON MODRED.VALOR_GENOTIPO_DOADOR (EXAM_ID ASC, LOCU_ID ASC, VAGD_NR_POSICAO_ALELO ASC) 
)
 ENABLE;

ALTER TABLE MODRED.VALOR_GENOTIPO_DOADOR RENAME CONSTRAINT FK_VAGD_GENO TO FK_VAGD_GEDO;

COMMENT ON TABLE MODRED.VALOR_GENOTIPO_DOADOR IS 'Tabela de genótipos por doador. Armazena os locus exame, 
com os valores alélicos de maior resolução, associados ao exames já conferidos (status aceito) para o doador.';

ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME COLUMN GENO_ID TO GEPA_ID;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE  MODIFY (GEPA_ID NOT NULL);
ALTER INDEX IN_FK_VAGP_GENO RENAME TO IN_FK_VAGP_GEPA;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE RENAME CONSTRAINT FK_VAGP_GENO TO FK_VAGP_GEPA;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME COLUMN GENO_ID TO GEPA_ID;
DELETE FROM MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE WHERE PACI_NR_RMR IS NULL;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE  MODIFY (PACI_NR_RMR NOT NULL);
ALTER INDEX IN_FK_VGEP_GENO RENAME TO IN_FK_VGEP_GEPA;
ALTER TABLE MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE RENAME CONSTRAINT FK_VGEP_GENO TO FK_VGEP_GEPA;
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE.GEPA_ID IS 'Identificador do genotipo de paciente';
COMMENT ON COLUMN MODRED.VALOR_GENOTIPO_EXPAND_PACIENTE.PACI_NR_RMR IS 'referencia ao paciente';


CREATE SEQUENCE  "MODRED"."SQ_GEDO_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "MODRED"."SQ_VGBD_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "MODRED"."SQ_VGED_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "MODRED"."SQ_GEPA_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME COLUMN GENO_ID TO GEPA_ID;
ALTER INDEX IN_FK_VGBP_GENO RENAME TO IN_FK_VGBP_GEPA;
ALTER TABLE MODRED.VALOR_GENOTIPO_BUSCA_PACIENTE RENAME CONSTRAINT FK_VGBP_GENO TO FK_VGBP_GEPA;

delete from MODRED.valor_genotipo_expand_paciente where gepa_id in (
    select gepa_id from MODRED.genotipo_paciente where paci_nr_rmr is null
);

delete from MODRED.valor_genotipo_busca_paciente where gepa_id in (
    select gepa_id from MODRED.genotipo_paciente where paci_nr_rmr is null
);

delete from MODRED.valor_genotipo_paciente where gepa_id in (
    select gepa_id from MODRED.genotipo_paciente where paci_nr_rmr is null
);

delete from MODRED.genotipo_paciente where paci_nr_rmr is null;
ALTER TABLE MODRED.GENOTIPO_PACIENTE  MODIFY (PACI_NR_RMR NOT NULL);

ALTER TABLE MODRED.VALOR_GENOTIPO_DOADOR  MODIFY (VAGD_NR_TIPO NOT NULL);
ALTER TABLE MODRED.VALOR_GENOTIPO_DOADOR  MODIFY (GEDO_ID NOT NULL);

DELETE FROM MODRED.VALOR_GENOTIPO_PACIENTE WHERE VAGP_NR_TIPO IS NULL;
ALTER TABLE MODRED.VALOR_GENOTIPO_PACIENTE  MODIFY (VAGP_NR_TIPO NOT NULL);
commit;

create or replace procedure proc_criar_match_fake (rmr in NUMBER, idDoador in NUMBER)


IS
idMatch NUMBER;
qtdLocus NUMBER;
fase VARCHAR(2);
tipoSolicitacao NUMBER;
idBusca NUMBER;
i   NUMBER;



begin
i:=0;
--DBMS_OUTPUT.PUT_LINE(rmr); 
--DBMS_OUTPUT.PUT_LINE(idDoador); 
    
    BEGIN
        select distinct ma.matc_id into idMatch from MODRED.match ma 
            inner join MODRED.busca b on ma.BUSC_ID = ma.BUSC_ID 
            inner join MODRED.status_busca sb on sb.stbu_id = b.stbu_id 
            where 
            ma.doad_id = idDoador and b.paci_nr_rmr = rmr 
            and sb.stbu_in_busca_ativa = 1
            and ma.matc_in_status = 1;
            
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        idBusca := NULL;
    END;
    
    --Encontra o id da busca
    select b.busc_id into idBusca from MODRED.busca b 
            inner join MODRED.status_busca sb on sb.stbu_id = b.stbu_id             
            where b.paci_nr_rmr = rmr
            and sb.stbu_in_busca_ativa = 1;
            
    --DBMS_OUTPUT.PUT_LINE(idBusca); 
    
    --se o genótipo tiver mais de 3 locus entra na fase 2, senão entra na fase 1
    select count(*)/2 into qtdLocus from MODRED.VALOR_GENOTIPO_DOADOR WHERE GEDO_ID IN (
        SELECT GEDO_ID FROM MODRED.GENOTIPO_DOADOR WHERE DOAD_ID = idDoador
    );
    if(qtdLocus >= 3) then
        fase := 'F2';
    else
        fase := 'F1';
    end if;
    
    BEGIN
    --Se existir pedido pro mesmo paciente e o tipo da solicitação nao for FASE 3 ( CT ) deverá jogar ele para 'EXAME FASE 2'
        select s.tiso_id into tipoSolicitacao from MODRED.solicitacao s 
            inner join MODRED.match m on s.MATC_ID = m.MATC_ID
            inner join MODRED.pedido_exame pe on pe.soli_id = s.soli_id
            where s.soli_nr_status = 1 and s.paci_nr_rmr = 1 and m.DOAD_ID = 1
            and m.matc_in_status = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        tipoSolicitacao := NULL;
    END;
    if(tipoSolicitacao is not null and tipoSolicitacao != 2) then
        fase := 'EX';
    end if;
    
    --DBMS_OUTPUT.PUT_LINE(fase); 
    --DBMS_OUTPUT.PUT_LINE(idBusca); 
    
    --criar um match se não existir,
   if(idMatch IS null) then
    idMatch:=SQ_MATC_ID.nextval;
        --DBMS_OUTPUT.PUT_LINE('Inserir busca'); 
        INSERT INTO MODRED.MATCH(MATC_ID,MATC_IN_STATUS,BUSC_ID,DOAD_ID,MATC_TX_SITUACAO) 
        values ( idMatch, 1, idBusca, idDoador, fase);
    else 
        UPDATE MODRED.match set MATC_TX_SITUACAO = fase where matc_id = idMatch;
    end if;
   
    
   --Cria a qualificação match a partir do genotipo do doador
    delete from MODRED.qualificacao_match where doad_id = idDoador;
  FOR rec IN (select vg.* from MODRED.VALOR_GENOTIPO_DOADOR vg WHERE vg.GEDO_ID IN (SELECT GEDO_ID FROM MODRED.GENOTIPO_DOADOR WHERE DOAD_ID = idDoador))
       LOOP
          i := i + 1;
          
          --0- para sorologia, 1- para antígeno, 2- NMDP, 3- Grupo G, 4-  Grupo P e 5 Alelo
          insert into MODRED.qualificacao_match (QUMA_ID,LOCU_ID,QUMA_TX_QUALIFICACAO,QUMA_NR_POSICAO,MATC_ID,DOAD_ID,QUMA_TX_GENOTIPO,QUMA_NR_TIPO) 
          values (SQ_QUMA_ID.nextval,rec.locu_id,'P' , REC.VAGD_NR_POSICAO_ALELO, idMatch, idDoador,REC.VAGD_TX_ALELO, REC.VAGD_NR_TIPO);
          --DBMS_OUTPUT.put_line ('Record ' || i || ' is emp ' || rec.locu_id);
       END LOOP;
    
end;

COMMIT;



-- CRIAÇÃO DA TABELA QUE GUARDA QUAIS FORAM OS LÓCUS PEDIDO PARA DETERMINADO EXAME.
CREATE TABLE MODRED.LOCUS_PEDIDO_EXAME (
  LOPE_ID NUMBER NOT NULL 
, LOCU_ID VARCHAR2(4) NOT NULL 
, PEEX_ID NUMBER NOT NULL 
, CONSTRAINT PK_LOPE PRIMARY KEY (LOPE_ID) ENABLE 
);

-- INCLUÍNDO CONSTRAINT DE FK PARA COLUNA LOCUS
ALTER TABLE MODRED.LOCUS_PEDIDO_EXAME
ADD CONSTRAINT FK_LOPE_LOCU FOREIGN KEY(LOCU_ID) 
REFERENCES MODRED.LOCUS(LOCU_ID)
ENABLE;
-- CRIANDO INDEX COM A TABELA LOCUS
CREATE INDEX MODRED.IN_FK_LOPE_LOCU ON MODRED.LOCUS_PEDIDO_EXAME (LOCU_ID);

-- INCLUÍNDO CONSTRAINT DE FK PARA COLUNA PEDIDO_EXAME
ALTER TABLE MODRED.LOCUS_PEDIDO_EXAME
ADD CONSTRAINT FK_LOPE_PEEX FOREIGN KEY(PEEX_ID) 
REFERENCES MODRED.PEDIDO_EXAME(PEEX_ID)
ENABLE;
-- CRIANDO INDEX COM A TABELA PEDIDO_EXAME 
CREATE INDEX MODRED.IN_FK_LOPE_PEEX ON MODRED.LOCUS_PEDIDO_EXAME (PEEX_ID);


-- COMENTANDO AS COLUNAS DA TABELA LOCUS_PEDIDO
COMMENT ON TABLE MODRED.LOCUS_PEDIDO_EXAME IS 'Tabela onde ficam os lócus solicitados no pedido de exame.';
COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME.LOPE_ID IS 'Chave primária da tabela.';
COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME.LOCU_ID IS 'Código do lócus selecionado no pedido.';
COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME.PEEX_ID IS 'ID do pedido de exame onde os lócus foram solicitados.';

-- CRIANDO A SEQUENCE DA TABELA
CREATE SEQUENCE MODRED.SQ_LOPE_ID MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

-- STATUS DE AGUARDANDO RESULTADO, UTILIZADO APÓS O PEDIDO DE EXAME INTERNACIONAL SER CADASTRADO.
INSERT INTO MODRED.STATUS_PEDIDO_EXAME (STPX_ID, STPX_TX_DESCRICAO) VALUES (4, 'AGUARDANDO RESULTADO');
COMMIT;

ALTER TABLE MODRED.TIPO_TAREFA  
MODIFY (TITA_TX_DESCRICAO VARCHAR2(60 BYTE) );

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TARE_IN_SOMENTE_AGRUPADOR, TITA_NR_TEMPO_EXECUCAO) 
VALUES (64, 'NOTIFICACAO_CADASTRAR_RESULTADO_EXAME_INTERNACIONAL', 0, 0, 604800);
COMMIT;

INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (13, 5, 0);
COMMIT;



--permissão para que o médico veja os pedidos de exame
INSERT INTO "MODRED"."PERMISSAO" (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES ('86', '1', '0');


-- CRIAR TIPO DE TAREFA CADASTRAR_RESULTADO_EXAME_INTERNACIONAL
INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TARE_IN_SOMENTE_AGRUPADOR, TITA_NR_TEMPO_EXECUCAO) 
VALUES (63, 'CADASTRAR_RESULTADO_EXAME_INTERNACIONAL', 1, 0, 604800);
COMMIT;

-- INCLUSÃO DO TIPO DE EXAME / TESTE CONFIRMATORIO
INSERT INTO "MODRED"."TIPO_EXAME" (TIEX_ID, TIEX_TX_DESCRICAO) VALUES ('1', 'Teste Confirmatório');
COMMIT;

-- LABORATORIO PASSA A SER NULO, PARA PEDIDO DE DOADOR INTERNACIONAL
ALTER TABLE PEDIDO_EXAME  
MODIFY (LABO_ID NULL);

-- REMOVENDO ID NA TABELA ASSOCIATIVA - LOCUS_PEDIDO_EXAME
ALTER TABLE LOCUS_PEDIDO_EXAME
DROP COLUMN LOPE_ID;

-- ADICIONANDO ID NA TABELA ASSOCIATIVA - LOCUS_PEDIDO_EXAME 
ALTER TABLE LOCUS_PEDIDO_EXAME
ADD CONSTRAINT LOCUS_PEDIDO_EXAME_PK PRIMARY KEY (LOCU_ID, PEEX_ID)
ENABLE;


UPDATE MODRED.TIPO_TAREFA SET TITA_NR_TEMPO_EXECUCAO = 0
WHERE TITA_ID = 63;
COMMIT;

ALTER TABLE TAREFA 
ADD (TARE_ID_TAREFA_PAI NUMBER );

CREATE INDEX IN_FK_TARE_TARE_PAI ON TAREFA (TARE_ID_TAREFA_PAI);

ALTER TABLE TAREFA
ADD CONSTRAINT FK_TARE_TARE_PAI FOREIGN KEY
(
  TARE_ID_TAREFA_PAI 
)
REFERENCES TAREFA
(
  TARE_ID 
)
ENABLE;

COMMENT ON COLUMN TAREFA.TARE_ID_TAREFA_PAI IS 'Id da tarefa que originol a tarefa.';


-- TORNANDO DATA ATUALIZAÇÃO OBRIGATÓRIA PARA OS DOADORES (NACIONAL E INTERNACIONAL).
UPDATE MODRED.DOADOR
SET DOAD_DT_ATUALIZACAO = DOAD_DT_CADASTRO
WHERE DOAD_DT_ATUALIZACAO IS NULL;
COMMIT;

ALTER TABLE DOADOR  
MODIFY (DOAD_DT_ATUALIZACAO NOT NULL);

INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (95, 'CADASTRAR_RESULTADO_PEDIDO_FASE_2_INTERNACIONAL', 'Permite ao usuario cadastrar o resultado de um pedido de exame fase 2 para um doador internacional.');
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (95, 5, 0);
COMMIT;

ALTER TABLE MODRED.PEDIDO_EXAME 
ADD (EXAM_ID_DOADOR_INTERNACIONAL NUMBER );

CREATE INDEX MODRED.IN_FK_PEEX_EXAM_DOADOR_INTER ON MODRED.PEDIDO_EXAME (EXAM_ID_DOADOR_INTERNACIONAL);

ALTER TABLE MODRED.PEDIDO_EXAME
ADD CONSTRAINT FK_PEEX_EXAM_DOADOR_INTER FOREIGN KEY
(
  EXAM_ID_DOADOR_INTERNACIONAL 
)
REFERENCES MODRED.EXAME
(
  EXAM_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.PEDIDO_EXAME.EXAM_ID_DOADOR_INTERNACIONAL IS 'Referência para o exame do doador internacional de resultado do pedido';


-- TORNANDO A LISTA DE LÓCUS QUE ESTAVA PARA O TIPO 
-- TIPIFICAÇÃO PASSAR A SER ASSOCIADO AO TESTE CONFIRMATORIO
UPDATE MODRED.TIPO_EXAME_LOCUS
SET TIEX_ID = 1
WHERE TIEX_ID = 0;
COMMIT;

ALTER TABLE MODRED.PEDIDO_EXAME 
ADD (PEEX_TX_JUSTIFICATIVA VARCHAR2(255) );

COMMENT ON COLUMN MODRED.PEDIDO_EXAME.PEEX_TX_JUSTIFICATIVA IS 'Campo livre onde é informado a justificativa para o cancelamento do pedido.';
-------Queiroz



ALTER TABLE MODRED.DOADOR DROP CONSTRAINT FK_DOAD_GENO;

ALTER TABLE MODRED.DOADOR RENAME COLUMN GENO_ID TO GEDO_ID;

ALTER INDEX IN_FK_DOAD_GENO RENAME TO IN_FK_DOAD_GEDO;

ALTER TABLE MODRED.DOADOR_AUD RENAME COLUMN GENO_ID TO GEDO_ID;

ALTER TABLE MODRED.DOADOR
ADD CONSTRAINT FK_DOAD_GEDO FOREIGN KEY
(
  GEDO_ID 
)
REFERENCES MODRED.GENOTIPO_DOADOR
(
  GEDO_ID 
)
ENABLE;


CREATE TABLE MODRED.PEDIDO_EXAME_AUD 
(
  PEEX_ID NUMBER(19, 0) NOT NULL 
, AUDI_ID NUMBER(19, 0) NOT NULL 
, AUDI_TX_TIPO NUMBER(3, 0) 
, PEEX_DT_COLETA_AMOSTRA DATE 
, PEEX_DT_CRIACAO TIMESTAMP(6) 
, PEEX_DT_RECEBIMENTO_AMOSTRA DATE 
, PEEX_TX_JUSTIFICATIVA VARCHAR2(255 CHAR) 
, PEEX_IN_OWNER VARCHAR2(255 CHAR) 
, EXAM_ID NUMBER(19, 0) 
, EXAM_ID_DOADOR_INTERNACIONAL NUMBER(19, 0) 
, LABO_ID NUMBER(19, 0) 
, SOLI_ID NUMBER(19, 0) 
, STPX_ID NUMBER(19, 0) 
, TIEX_ID NUMBER(19, 0) 
, CONSTRAINT PK_PEEA PRIMARY KEY 
  (
    PEEX_ID 
  , AUDI_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_PEEA ON PEDIDO_EXAME_AUD (PEEX_ID ASC, AUDI_ID ASC) 
  )
  ENABLE 
);

ALTER TABLE MODRED.PEDIDO_EXAME_AUD
ADD CONSTRAINT FK_PEEA_AUDI FOREIGN KEY
(
  AUDI_ID 
)
REFERENCES AUDITORIA
(
  AUDI_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.PEEX_ID IS 'ID DO PEDIDO DE EXAME';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.AUDI_ID IS 'ID DA AUDITORIA';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.AUDI_TX_TIPO IS 'TIPO DE OPERAÇÃO';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.PEEX_DT_COLETA_AMOSTRA IS 'AUDITORIA DA DATA COLETA';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.PEEX_DT_CRIACAO IS 'AUDITORIA DA DATA DE CRIAÇÃO';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.PEEX_DT_RECEBIMENTO_AMOSTRA IS 'AUDITORIA DA DATA DE RECEBIMENTO';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.PEEX_TX_JUSTIFICATIVA IS 'AUDITORIA DA JUSTIFICATIVA';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.PEEX_IN_OWNER IS 'AUDITORIA DO DONO PEDIDO (DOADOR OU PACIENTE)
';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.EXAM_ID IS 'AUDITORIA DO EXAME';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.EXAM_ID_DOADOR_INTERNACIONAL IS 'AUDITORIA DO EXAME INTERNACIONAL';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.LABO_ID IS 'AUDITORIA DO LABORATORIO';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.SOLI_ID IS 'AUDITORIA DA SOLICITACAO';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.STPX_ID IS 'AUDITORIA DO STATUS DO PEDIDO';

COMMENT ON COLUMN MODRED.PEDIDO_EXAME_AUD.TIEX_ID IS 'AUDITORIA TIPO DE EXAME';




CREATE TABLE MODRED.LOCUS_PEDIDO_EXAME_AUD 
(
  AUDI_ID NUMBER(19, 0) NOT NULL 
, PEEX_ID NUMBER(19, 0) NOT NULL 
, LOCU_ID VARCHAR2(255 CHAR) NOT NULL 
, AUDI_TX_TIPO NUMBER(3, 0) 
, CONSTRAINT PK_LPEA PRIMARY KEY 
  (
    AUDI_ID 
  , PEEX_ID 
  , LOCU_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_LPEA ON LOCUS_PEDIDO_EXAME_AUD (AUDI_ID ASC, PEEX_ID ASC, LOCU_ID ASC)
  )
  ENABLE 
) ;

ALTER TABLE MODRED.LOCUS_PEDIDO_EXAME_AUD
ADD CONSTRAINT FK_LPEA_AUDI FOREIGN KEY
(
  AUDI_ID 
)
REFERENCES AUDITORIA
(
  AUDI_ID 
)
ENABLE;

COMMENT ON TABLE MODRED.LOCUS_PEDIDO_EXAME_AUD IS 'AUDITORIA DE LOCUS DE PEDIDO EXAME';

COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME_AUD.AUDI_ID IS 'IDENTIFICAÇÃO DE AUDITORIA';

COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME_AUD.PEEX_ID IS 'IDENTIFICAÇÃO DO PEDIDO DE EXAME';

COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME_AUD.LOCU_ID IS 'IDENTIFICAÇÃO DO LOCUS';

COMMENT ON COLUMN MODRED.LOCUS_PEDIDO_EXAME_AUD.AUDI_TX_TIPO IS 'TIPO DE AUDITORIA';
