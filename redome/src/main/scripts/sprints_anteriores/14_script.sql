CREATE TABLE MODRED.STATUS_BUSCA 
(
  STBU_ID NUMBER NOT NULL 
, STBU_TX_DESCRICAO VARCHAR2(60 BYTE) NOT NULL 
, CONSTRAINT PK_STBU PRIMARY KEY 
  (
    STBU_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_STBU ON MODRED.STATUS_BUSCA (STBU_ID ASC)
  )
  ENABLE 
) ;

COMMENT ON COLUMN MODRED.STATUS_BUSCA.STBU_ID IS 'IDENTIFICAÇÃO DO STATUS DA BUSCA';

COMMENT ON COLUMN MODRED.STATUS_BUSCA.STBU_TX_DESCRICAO IS 'DESCRIÇÃO DO STATUS DE BUSCA';

CREATE TABLE MODRED.BUSCA 
(
  BUSC_ID NUMBER NOT NULL 
, PACI_NR_RMR NUMBER NOT NULL 
, USUA_ID NUMBER NOT NULL 
, STBU_ID NUMBER NOT NULL 
, CONSTRAINT PK_BUSC PRIMARY KEY 
  (
    BUSC_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_BUSC ON BUSCA (BUSC_ID ASC)
  )
  ENABLE 
);

CREATE INDEX IN_FK_BUSC_STBU ON MODRED.BUSCA (STBU_ID);

CREATE INDEX IN_FK_BUSC_PACI ON MODRED.BUSCA (PACI_NR_RMR ASC);

CREATE INDEX IN_FK_BUSC_USU ON MODRED.BUSCA (USUA_ID ASC);

ALTER TABLE MODRED.BUSCA
ADD CONSTRAINT FK_BUSC_PACI FOREIGN KEY
(
  PACI_NR_RMR 
)
REFERENCES MODRED.PACIENTE
(
  PACI_NR_RMR 
)
ENABLE;

ALTER TABLE MODRED.BUSCA
ADD CONSTRAINT FK_BUSC_STBU FOREIGN KEY
(
  STBU_ID 
)
REFERENCES MODRED.STATUS_BUSCA
(
  STBU_ID 
)
ENABLE;

ALTER TABLE MODRED.BUSCA
ADD CONSTRAINT FK_BUSC_USUA FOREIGN KEY
(
  USUA_ID 
)
REFERENCES MODRED.USUARIO
(
  USUA_ID 
)
ENABLE;

COMMENT ON COLUMN BUSCA.BUSC_ID IS 'IDENTIFICAÇÃO DA BUSCA';

COMMENT ON COLUMN BUSCA.PACI_NR_RMR IS 'PACIENTE DO PROCESSO DE BUSCA';

COMMENT ON COLUMN BUSCA.USUA_ID IS 'ANALISTA RESPONSÁVEL PELA BUSCA';

COMMENT ON COLUMN BUSCA.STBU_ID IS 'STATUS DA BUSCA ';

CREATE SEQUENCE MODRED.SQ_BUSC_ID INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;


CREATE TABLE MODRED.BUSCA_AUD 
(
  BUSC_ID NUMBER NOT NULL 
, AUDI_ID NUMBER NOT NULL 
, AUDI_TX_TIPO NUMBER 
, PACI_NR_RMR NUMBER 
, STBU_ID NUMBER 
, USUA_ID NUMBER 
, CONSTRAINT PK_BUAU PRIMARY KEY 
  (
    BUSC_ID 
  , AUDI_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_BUAU ON BUSCA_AUD (BUSC_ID ASC, AUDI_ID ASC)
  )
  ENABLE 
);

ALTER TABLE MODRED.BUSCA_AUD
ADD CONSTRAINT FK_BUAU_AUDI FOREIGN KEY
(
  AUDI_ID 
)
REFERENCES MODRED.AUDITORIA
(
  AUDI_ID 
)
ENABLE;

COMMENT ON COLUMN BUSCA_AUD.BUSC_ID IS 'IDENTIFICAÇÃO DA AUTITORIA DE BUSCA';

COMMENT ON COLUMN BUSCA_AUD.AUDI_ID IS 'REFERÊNCIA PARA A TABELA DE AUDITORIA';

COMMENT ON COLUMN BUSCA_AUD.AUDI_TX_TIPO IS 'TIPO DE AUTITORIA';

COMMENT ON COLUMN BUSCA_AUD.PACI_NR_RMR IS 'REFERÊNCIA AO PACIENTE';

COMMENT ON COLUMN BUSCA_AUD.STBU_ID IS 'STATUS DA BUSCA';

COMMENT ON COLUMN BUSCA_AUD.USUA_ID IS 'REFERÊNCIA DO USUARIO RESPONSAVÉL PELA BUSCA';/* Criação do recurso - História 2 */
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (19,	'EDITAR_DADOS_PESSOAIS', 'Permite que o médico altere os dados de identificação e dados pessoais'); 
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (19, 1, 1);
COMMIT;

INSERT INTO "MODRED"."PERFIL" (PERF_ID, PERF_TX_DESCRICAO, PERF_NR_ENTITY_STATUS) VALUES ('5', 'ANALISTA_BUSCA_REDOME', '1');
INSERT INTO "MODRED"."USUARIO" (USUA_ID, USUA_TX_NOME, USUA_TX_USERNAME, USUA_TX_PASSWORD, USUA_IN_ATIVO, USUA_NR_ENTITY_STATUS) VALUES ('5', 'ANALISTA BUSCA REDOME', 'ANALISTA_BUSCA', '$2a$11$KMAfznbkZhx9mvESGy3.GewPWbSGQLVTnj5O0m7cIo5NrucDtcXT.', '1', '1');
INSERT INTO "MODRED"."USUARIO_PERFIL" (USUA_ID, PERF_ID) VALUES ('5', '5');
COMMIT;




INSERT INTO "MODRED"."STATUS_BUSCA" (STBU_ID, STBU_TX_DESCRICAO) VALUES ('1', 'INATIVA');
INSERT INTO "MODRED"."STATUS_BUSCA" (STBU_ID, STBU_TX_DESCRICAO) VALUES ('2', 'ATIVA');
INSERT INTO "MODRED"."STATUS_BUSCA" (STBU_ID, STBU_TX_DESCRICAO) VALUES ('3', 'CANCELADA');
COMMIT;

ALTER TABLE BUSCA MODIFY (USUA_ID NULL);
INSERT INTO MODRED.BUSCA (BUSC_ID, PACI_NR_RMR, STBU_ID)
SELECT MODRED.SQ_BUSC_ID.NEXTVAL, PACI_NR_RMR, 1 FROM PACIENTE where PACI_NR_RMR not in (select B.PACI_NR_RMR from BUSCA B);
COMMIT;

--Criação das tabelas de cancelamento e motivo da busca

CREATE TABLE MODRED.CANCELAMENTO_BUSCA 
(
  CABU_ID NUMBER NOT NULL 
, CABU_DT_EVENTO TIMESTAMP 
, CABU_OBSERVACAO VARCHAR2(255) 
, BUSC_ID NUMBER NOT NULL 
, CONSTRAINT PK_CABU PRIMARY KEY 
  (
    CABU_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_BUSCA ON MODRED.CANCELAMENTO_BUSCA (CABU_ID ASC) 
  )
  ENABLE 
);

CREATE INDEX IN_FK_BUSC ON MODRED.CANCELAMENTO_BUSCA (BUSC_ID ASC);

CREATE SEQUENCE MODRED.SQ_CABU_ID INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;

ALTER TABLE MODRED.CANCELAMENTO_BUSCA
ADD CONSTRAINT FK_BUSC_CABU FOREIGN KEY
(
  BUSC_ID 
)
REFERENCES BUSCA
(
  BUSC_ID 
)
ENABLE;

COMMENT ON TABLE MODRED.CANCELAMENTO_BUSCA IS 'Tabela de cancelamento de busca de um paciente';

COMMENT ON COLUMN MODRED.CANCELAMENTO_BUSCA.CABU_ID IS 'Chave primária da tabela de cancelamento da busca do paciente';

COMMENT ON COLUMN MODRED.CANCELAMENTO_BUSCA.CABU_DT_EVENTO IS 'Data do evento referente ao cancelamento';

COMMENT ON COLUMN MODRED.CANCELAMENTO_BUSCA.CABU_OBSERVACAO IS 'Campo que armazena uma justificativa ao cancelamento';

COMMENT ON COLUMN MODRED.CANCELAMENTO_BUSCA.BUSC_ID IS 'Chave estrangeira da tabela de busca.';


CREATE TABLE MODRED.MOTIVO_CANCELAMENTO_BUSCA 
(
  MOCB_ID NUMBER NOT NULL 
, MOCB_TX_DESCRICAO VARCHAR2(80) NOT NULL 
, CONSTRAINT PK_MOCB PRIMARY KEY 
  (
    MOCB_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX IN_PK_MOCB ON MODRED.MOTIVO_CANCELAMENTO_BUSCA (MOCB_ID ASC) 
  )
  ENABLE 
);

COMMENT ON TABLE MODRED.MOTIVO_CANCELAMENTO_BUSCA IS 'Tabela de motivos de cancelamento de busca';

COMMENT ON COLUMN MODRED.MOTIVO_CANCELAMENTO_BUSCA.MOCB_ID IS 'Chave primária de motivo de cancelamento de uma busca';

COMMENT ON COLUMN MODRED.MOTIVO_CANCELAMENTO_BUSCA.MOCB_TX_DESCRICAO IS 'Descricao do motivo de cancelamento';


ALTER TABLE MODRED.CANCELAMENTO_BUSCA 
ADD (MOCB_ID NUMBER NOT NULL);

CREATE INDEX IN_FK_MOCB_CABU ON MODRED.CANCELAMENTO_BUSCA (MOCB_ID);

ALTER TABLE MODRED.CANCELAMENTO_BUSCA
ADD CONSTRAINT FK_MOCB_CABU FOREIGN KEY
(
  MOCB_ID 
)
REFERENCES MOTIVO_CANCELAMENTO_BUSCA
(
  MOCB_ID 
)
ENABLE;

COMMENT ON COLUMN CANCELAMENTO_BUSCA.MOCB_ID IS 'Chave estrangeira da tabela de motivo';



INSERT INTO "MODRED"."TIPO_TAREFA" (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA) VALUES ('8', 'RECEBER_PACIENTE', '0');
INSERT INTO "MODRED"."RECURSO" (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES ('22', 'PACIENTES_PARA_PROCESSO_BUSCA', 'Permite que o analista de busca REDOME visualize  os pacientes que ainda não tem busca iniciada ');
INSERT INTO "MODRED"."PERMISSAO" (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES ('22', '5', '0');
commit;
-- HISTÓRIA 3
-- CRIAÇÃO DO RECURSO PARA PERMISSÃO
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (20, 'EDITAR_CONTATO_PACIENTE', 'Permite edição para o contato do paciente no sistema.');
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (20, 1, 1);
COMMIT;

-- Atualiza as tarefas de pendencias antigas com seus respectivos ids de pendencia
update MODRED.tarefa t set tare_nr_relacao_entidade = (select distinct pend.PEND_ID from MODRED.pendencia pend 
    inner join MODRED.tarefa tar
    on tar.tare_dt_criacao = pend.PEND_DT_CRIACAO
    where tar.tare_id = t.tare_id)     
    where
    t.TARE_ID in ( 
    select tar.TARE_ID from MODRED.processo proc inner join MODRED.tarefa tar  
    on proc.proc_id = tar.proc_id inner join MODRED.pendencia pend 
    on tar.tare_dt_criacao = pend.PEND_DT_CRIACAO
    where proc.proc_nr_tipo = 10 and tar.tita_id = 27);
COMMIT;

--Insere os possíveis motivos de cancelamento    
insert into modred.motivo_cancelamento_busca (mocb_id, MOCB_TX_DESCRICAO) values (1,'ÓBITO');
insert into modred.motivo_cancelamento_busca (mocb_id, MOCB_TX_DESCRICAO) values (2,'TRANSPLANTE APARENTADO');
insert into modred.motivo_cancelamento_busca (mocb_id, MOCB_TX_DESCRICAO) values (3,'OUTROS');
COMMIT;

INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (21,	'CANCELAR_BUSCA', 'Permite que o médico cancele a busca do paciente.'); 
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (21, 1, 0);
COMMIT;

INSERT INTO "MODRED"."TIPO_TAREFA" (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO) VALUES ('9', 'LIBERAR_ACOMPANHAR_BUSCA', '1', '3600');
COMMIT;

UPDATE "MODRED"."STATUS_BUSCA" SET STBU_TX_DESCRICAO = 'AGUARDANDO LIBERAÇÃO' WHERE STBU_ID = 1;
UPDATE "MODRED"."STATUS_BUSCA" SET STBU_TX_DESCRICAO = 'LIBERADA' WHERE  STBU_ID = 2;
UPDATE "MODRED"."STATUS_BUSCA" SET STBU_TX_DESCRICAO = 'EM AVALIAÇÃO' WHERE  STBU_ID = 3;
INSERT INTO "MODRED"."STATUS_BUSCA" (STBU_ID, STBU_TX_DESCRICAO) VALUES ('4', 'CANCELADA');
commit;

INSERT INTO "MODRED"."PERMISSAO" (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES ('3', '4', '0');
commit;

--Adicionando coluna que é um agrupador para dizer pelo status se busca está ativa ou não.
ALTER TABLE MODRED.STATUS_BUSCA 
ADD (STBU_IN_BUSCA_ATIVA NUMBER(1) DEFAULT 0 NOT NULL);

COMMENT ON COLUMN MODRED.STATUS_BUSCA.STBU_IN_BUSCA_ATIVA IS 'AGRUPADOR DOS STATUS DA BUSCA, 0 - INATIVO E 1 - ATIVO';
UPDATE MODRED.STATUS_BUSCA  SET STBU_IN_BUSCA_ATIVA = 1 WHERE STBU_ID in (1,2);


--Adicionando coluna que diz se o campo de descrição passa a ser obrigatório ou não
ALTER TABLE MODRED.MOTIVO_CANCELAMENTO_BUSCA 
ADD (MOCB_IN_DESC_OBRIGATORIO NUMBER(1) DEFAULT 0 NOT NULL);

COMMENT ON COLUMN MODRED.MOTIVO_CANCELAMENTO_BUSCA.MOCB_IN_DESC_OBRIGATORIO IS 'Coluna que define se o campo descricao é obrigatório.';

update MODRED.MOTIVO_CANCELAMENTO_BUSCA set MOCB_IN_DESC_OBRIGATORIO = 1 where MOCB_ID = 2;




ALTER TABLE MODRED.CANCELAMENTO_BUSCA 
ADD (USUA_ID NUMBER );

ALTER TABLE MODRED.CANCELAMENTO_BUSCA 
ADD (CABU_DT_CRIACAO TIMESTAMP );

ALTER TABLE MODRED.CANCELAMENTO_BUSCA
ADD CONSTRAINT FK_USUA_CABU FOREIGN KEY
(
  USUA_ID 
)
REFERENCES MODRED.USUARIO
(
  USUA_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.CANCELAMENTO_BUSCA.USUA_ID IS 'Chave estrangeira do usuario responsavel pelo cancelamento da busca';

COMMENT ON COLUMN MODRED.CANCELAMENTO_BUSCA.CABU_DT_CRIACAO IS 'Data de cancelamento da busca.';

update modred.CANCELAMENTO_BUSCA set CABU_DT_CRIACAO = sysdate, USUA_ID = 1;

ALTER TABLE modred.CANCELAMENTO_BUSCA  
MODIFY (USUA_ID NOT NULL);

ALTER TABLE modred.CANCELAMENTO_BUSCA  
MODIFY (CABU_DT_CRIACAO NOT NULL);

--Alterando comentario
COMMENT ON COLUMN MODRED.AVALIACAO.AVAL_IN_STATUS IS 'Status da avaliação 0 - Finalizado 1 - Aberto 2 - Cancelada por busca';

-- Adicionando nova coluna a avaliação
ALTER TABLE MODRED.AVALIACAO ADD AVAL_TX_MOTIVO_CANCELAMENTO VARCHAR2(30 byte);
COMMENT ON COLUMN MODRED.AVALIACAO.AVAL_TX_MOTIVO_CANCELAMENTO IS 'Descrição com o motivo do cancelamento da avaliação.';
COMMENT ON COLUMN MODRED.AVALIACAO.AVAL_IN_STATUS IS 'Status da avaliação 0 - Finalizado 1 - Aberto 2 - Cancelada por busca';
-- e na tabela de auditoria
ALTER TABLE MODRED.AVALIACAO_AUD ADD AVAL_TX_MOTIVO_CANCELAMENTO VARCHAR2(30 byte);
COMMENT ON COLUMN MODRED.AVALIACAO_AUD.AVAL_TX_MOTIVO_CANCELAMENTO IS 'Descrição com o motivo do cancelamento da avaliação.';


insert into MODRED.processo (proc_id, proc_dt_criacao, proc_dt_atualizacao, proc_nr_tipo, paci_nr_rmr, proc_nr_status)
select SQ_AVAL_ID.nextval,sysdate, sysdate,5, t1.*,1
from(
select p.PACI_NR_RMR from AVALIACAO av, PACIENTE p
          where av.PACI_NR_RMR = p.PACI_NR_RMR 
          AND  p.PACI_NR_RMR in ( select distinct e.PACI_NR_RMR from GENOTIPO g, EXAME e
         where g.EXAM_ID = e.EXAM_ID and g.LOCU_ID in ('A', 'B', 'DRB1') 
         group by e.PACI_NR_RMR having count(g.LOCU_ID) = 3 )
          and av.AVAL_IN_STATUS = 1 
) t1;
commit;


INSERT INTO MODRED.TAREFA (TARE_ID, PROC_ID, TARE_DT_CRIACAO, TARE_DT_ATUALIZACAO, TITA_ID, TARE_NR_STATUS, PERF_ID_RESPONSAVEL, 
CETR_ID_RESPONSAVEL, TARE_TX_DESCRICAO, USUA_ID_RESPONSAVEL, TARE_NR_RELACAO_ENTIDADE)
SELECT MODRED.SQ_TARE_ID.NEXTVAL, (SELECT P.PROC_ID FROM MODRED.PROCESSO P WHERE P.PACI_NR_RMR = B.PACI_NR_RMR AND P.PROC_NR_TIPO = 5), 
sysdate, sysdate, 9, 1, 5, 
NULL, NULL, NULL, NULL
FROM MODRED.BUSCA B
WHERE B.STBU_ID = 1;
COMMIT;