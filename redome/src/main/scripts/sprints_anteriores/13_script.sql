-- criação de perfil Analista Redome, recursos e permissões.
INSERT INTO MODRED.PERFIL (PERF_ID, PERF_TX_DESCRICAO, PERF_NR_ENTITY_STATUS) VALUES (4, 'Analista Redome', 1);
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (15, 'MANTER_CENTRO_TRANSPLANTE', 'Permite manter o cadastro dos centros de transplante.');
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (16, 'MANTER_PERFIL', 'Permite manter o cadastro dos perfis de acesso ao sistema.');
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (17, 'MANTER_USUARIO', 'Permite manter o cadastro dos usuários do sistema.');

INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (15, 4, 0);
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (16, 4, 0);
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (17, 4, 0);
commit;

-- HISTORIA 3 - CRIAÇÃO DA TABELA DE GENÓTIPO
CREATE TABLE MODRED.GENOTIPO
(
    EXAM_ID NUMBER NOT NULL,
    LOCU_ID VARCHAR2(4 BYTE) NOT NULL,
    GENO_TX_ALELO VARCHAR2(20 BYTE) NOT NULL,
    GENO_NR_POSICAO_ALELO NUMBER(1) NOT NULL,
    CONSTRAINT PK_GENO PRIMARY KEY (
        EXAM_ID, 
        LOCU_ID,
        GENO_NR_POSICAO_ALELO
    )
    ENABLE
);

CREATE INDEX IN_FK_GENO_LOEX ON MODRED.LOCUS_EXAME (EXAM_ID ASC, LOCU_ID ASC);

COMMENT ON TABLE MODRED.GENOTIPO IS 'Tabela de genótipos por paciente. Armazena os locus exame, 
com os valores alélicos de maior resolução, associados ao exames já conferidos (status aceito) para o paciente.';
COMMENT ON COLUMN MODRED.GENOTIPO.EXAM_ID IS 'Identificador para a tabela de exame.';
COMMENT ON COLUMN MODRED.GENOTIPO.LOCU_ID IS 'Identificador para a tabela de locus.';
COMMENT ON COLUMN MODRED.GENOTIPO.GENO_TX_ALELO IS 'Valor do alelo com maior resolução.';
COMMENT ON COLUMN MODRED.GENOTIPO.GENO_NR_POSICAO_ALELO IS 'Posição do valor alelo dentro do locus/exame, 
se é referente ao primeiro ou segundo alelo.';

COMMIT;
--- HISTORIA 3 

--- HISTÓRIA 1
CREATE TABLE MODRED.TIPO_TAREFA 
(
  TITA_ID NUMBER NOT NULL 
, TITA_TX_DESCRICAO VARCHAR2(20) NOT NULL 
, TITA_IN_AUTOMATICA NUMBER NOT NULL 
, TITA_NR_TEMPO_EXECUCAO NUMBER 
,CONSTRAINT PK_TITA PRIMARY KEY 
(
  TITA_ID 
)
ENABLE
);

COMMENT ON TABLE MODRED.TIPO_TAREFA IS 'Tabela de tipos de tarefas';
COMMENT ON COLUMN MODRED.TIPO_TAREFA.TITA_ID IS 'Chave primária que identifica com exclusividade um tipo de tarefa';
COMMENT ON COLUMN MODRED.TIPO_TAREFA.TITA_TX_DESCRICAO IS 'Descrição do tipo da tarefa';
COMMENT ON COLUMN MODRED.TIPO_TAREFA.TITA_IN_AUTOMATICA IS 'Indentifica se a tarefa é automática';
COMMENT ON COLUMN MODRED.TIPO_TAREFA.TITA_NR_TEMPO_EXECUCAO IS 'Tempo em milisegundos para a execução da tarefa automática';

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO)
VALUES (27, 'RESPONDER_PENDENCIA', 0, NULL);

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO)
VALUES (28, 'NOTIFICACAO', 0, NULL);

/* TAREFA */
ALTER TABLE MODRED.TAREFA RENAME COLUMN TARE_NR_TIPO TO TITA_ID;

COMMENT ON COLUMN MODRED.TAREFA.TITA_ID IS 'Chave extrangeira que identificao tipo de tarefa a ser executada no processo de negócio.';

ALTER TABLE MODRED.TAREFA
ADD CONSTRAINT FK_TARE_TITA FOREIGN KEY
(
  TITA_ID 
)
REFERENCES MODRED.TIPO_TAREFA
(
  TITA_ID 
)
ENABLE;

CREATE INDEX IN_FK_TARE_TITA ON MODRED.TAREFA (TITA_ID);

ALTER TABLE MODRED.TAREFA 
DROP CONSTRAINT FK_TARE_MEDI_ID_RESPONSAVEL;

DROP INDEX IN_FK_TARE_MEDI_ID_RESPONSAVEL;

ALTER TABLE MODRED.TAREFA 
ADD (USUA_ID_RESPONSAVEL NUMBER );

COMMENT ON COLUMN MODRED.TAREFA.USUA_ID_RESPONSAVEL IS 'Usuário para o qual foi conferida esta tarefa, ou seja, trata-se do indivíduo responsável por executar a tarefa.';

ALTER TABLE MODRED.TAREFA
ADD CONSTRAINT FK_TARE_USUA_ID_RESPONSAVEL FOREIGN KEY
(
  USUA_ID_RESPONSAVEL 
)
REFERENCES MODRED.USUARIO
(
  USUA_ID 
)
ENABLE;

CREATE INDEX IN_FK_TARE_USUA_ID_RESPONSAVEL ON MODRED.TAREFA (USUA_ID_RESPONSAVEL);

UPDATE MODRED.TAREFA T SET T.USUA_ID_RESPONSAVEL = (SELECT M.USUA_ID FROM MODRED.MEDICO M WHERE T.MEDI_ID_RESPONSAVEL = M.MEDI_ID);
COMMIT;

ALTER TABLE MODRED.TAREFA 
DROP COLUMN MEDI_ID_RESPONSAVEL;
-- HISTÓRIA 1

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO)
VALUES (5, 'AVALIAR_PACIENTE', 0, NULL);
COMMIT;


ALTER TABLE MODRED.TAREFA 
ADD (TARE_NR_RELACAO_ENTIDADE NUMBER );

COMMENT ON COLUMN MODRED.TAREFA.TARE_NR_RELACAO_ENTIDADE IS 'Identificação de qualquer entidade que precise se relacionar com a tarefa.';

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO)
VALUES (6, 'AVALIAR_EXAME_HLA', 0, NULL);
COMMIT;

ALTER TABLE MODRED.TIPO_TAREFA  
MODIFY (TITA_TX_DESCRICAO VARCHAR2(30 BYTE) );

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO)
VALUES (7, 'TIMEOUT_CONFERENCIA_EXAME', 1, 3600);
COMMIT;

COMMENT ON COLUMN MODRED.TIPO_TAREFA.TITA_NR_TEMPO_EXECUCAO IS 'Tempo em segundos para a execução da tarefa automática';

ALTER TABLE MODRED.TAREFA  
MODIFY (PERF_ID_RESPONSAVEL NULL);

INSERT INTO MODRED.TAREFA (TARE_ID, PROC_ID, TARE_DT_CRIACAO, TARE_DT_ATUALIZACAO, TITA_ID, TARE_NR_STATUS, PERF_ID_RESPONSAVEL, 
CETR_ID_RESPONSAVEL, TARE_TX_DESCRICAO, USUA_ID_RESPONSAVEL, TARE_NR_RELACAO_ENTIDADE)
SELECT MODRED.SQ_TARE_ID.NEXTVAL, (SELECT P.PROC_ID FROM MODRED.PROCESSO P WHERE P.PACI_NR_RMR = E.PACI_NR_RMR AND P.PROC_NR_TIPO = 15), E.EXAM_DT_CRIACAO, E.EXAM_DT_CRIACAO, 6, 1, 3, 
NULL, NULL, NULL, E.EXAM_ID
FROM MODRED.EXAME E
WHERE E.EXAM_ID NOT IN (SELECT DISTINCT TARE_NR_RELACAO_ENTIDADE FROM MODRED.TAREFA WHERE TITA_ID = 6)
AND E.EXAM_NR_STATUS = 0;
COMMIT;


--Cria tarefas de avaliações

insert into modred.tarefa (tare_id, proc_id, 
tare_dt_criacao, tare_dt_atualizacao,
tita_id,tare_nr_status,perf_id_responsavel,cetr_id_responsavel,tare_tx_descricao,usua_id_responsavel,TARE_NR_RELACAO_ENTIDADE)
SELECT SQ_TARE_ID.NEXTVAL,(SELECT PROC_ID FROM modred.PROCESSO WHERE PACI_NR_RMR = T1.PACI_NR_RMR AND PROC_NR_TIPO = 10) ,
T1.AVAL_DT_CRIACAO,SYSDATE, 
5,1,                    2                    ,NULL,               NULL,          T1.MEDI_ID_AVALIADOR,      T1.aval_id
FROM(
select * from modred.avaliacao where aval_id not in (
    --Avaliações que já possuem tarefas
    select aval.aval_id from modred.avaliacao aval inner join modred.processo proc 
        on aval.paci_nr_rmr = proc.paci_nr_rmr
        inner join modred.tarefa tar on tar.proc_id = proc.proc_id
        where aval.medi_id_avaliador is not null
        and aval.medi_id_avaliador = tar.usua_id_responsavel
        and proc.proc_nr_tipo = 10
        and aval.AVAL_IN_STATUS = 1
        and tar.tita_id = 5
    )  
    and medi_id_avaliador is not null
    and aval_in_status = 1) T1;
    
    
insert into modred.tarefa (tare_id, proc_id, 
tare_dt_criacao, tare_dt_atualizacao,
tita_id,tare_nr_status,perf_id_responsavel,cetr_id_responsavel,tare_tx_descricao,usua_id_responsavel,TARE_NR_RELACAO_ENTIDADE)
SELECT SQ_TARE_ID.NEXTVAL,(SELECT PROC_ID FROM modred.PROCESSO WHERE PACI_NR_RMR = T1.PACI_NR_RMR AND PROC_NR_TIPO = 10),
T1.AVAL_DT_CRIACAO,     SYSDATE, 
5,         2,                null                    ,T1.CETR_ID,               NULL,         NULL,      T1.aval_id
FROM(

    select * from modred.avaliacao where aval_id not in (
    --Avaliações que já possuem tarefas
    select aval.aval_id from modred.avaliacao aval inner join modred.processo proc 
        on aval.paci_nr_rmr = proc.paci_nr_rmr
        inner join modred.tarefa tar on tar.proc_id = proc.proc_id
        where aval.medi_id_avaliador is null
        and aval.CETR_ID = tar.CETR_ID_RESPONSAVEL
        and proc.proc_nr_tipo = 10
        and aval.AVAL_IN_STATUS = 1
        and tar.tita_id = 5
    )  
    and medi_id_avaliador is null
    and aval_in_status = 1) T1;
    
    commit;

-- INCLUSÃO DA TABELA DE SOROLOGICO
CREATE TABLE MODRED.VALOR_SOROLOGICO
(
    LOCU_ID VARCHAR2(4 BYTE) NOT NULL,
    VASO_TX_ANTIGENO VARCHAR2(10 BYTE) NOT NULL,
    VASO_TX_VALORES VARCHAR2(100 BYTE) NOT NULL,
    CONSTRAINT PK_VASO PRIMARY KEY (
        LOCU_ID, VASO_TX_ANTIGENO
    )
    ENABLE
);

ALTER TABLE MODRED.VALOR_SOROLOGICO
ADD CONSTRAINT FK_VASO_LOCU FOREIGN KEY(LOCU_ID)
REFERENCES MODRED.LOCUS(LOCU_ID) ENABLE;

CREATE INDEX IN_FK_VASO_LOCU ON MODRED.VALOR_SOROLOGICO(LOCU_ID);


COMMENT ON TABLE MODRED.VALOR_SOROLOGICO IS 'Tabela de valores por antígeno.';
COMMENT ON COLUMN MODRED.VALOR_SOROLOGICO.LOCU_ID IS 'Código do locus (Chave estrangeira para a tabela de Locus).';
COMMENT ON COLUMN MODRED.VALOR_SOROLOGICO.VASO_TX_ANTIGENO IS 'Código do antígeno e identificador da tabela.';
COMMENT ON COLUMN MODRED.VALOR_SOROLOGICO.VASO_TX_VALORES IS 'Valores válidos relacionados ao antígeno.';

COMMIT;

-- INSERTS PROVISÓRIOS PARA VALORES SOROLOGICOS
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('A','2','203#/210#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('A','9','23/24/2403#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('A','10','25/26/34/66');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('A','19','29/30/31/32/33/74');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('A','24','2403#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('A','28','68/69');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','5','51/52/5102#/5103#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','7','703#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','12','44/45');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','14','64/65');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','15','62/63/75/76/77');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','16','38/39/3901#/3902#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','17','57/58');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','21','49/50/4005#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','22','54/55/56');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','27','2708#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','39','3901#/3902#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','40','60/61');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','51','5101#/5103#');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('B','70','71/72');
Insert into MODRED.VALOR_SOROLOGICO (LOCU_ID,VASO_TX_ANTIGENO,VASO_TX_VALORES) values ('C','3','9/10');

--

-- CORREÇÃO NO SCRIPT DE CRIAÇÃO DA TABELA GENOTIPO
DROP INDEX IN_FK_GENO_LOEX;

ALTER TABLE MODRED.GENOTIPO
ADD CONSTRAINT FK_GENO_LOEX FOREIGN KEY(EXAM_ID, LOCU_ID)
REFERENCES MODRED.LOCUS_EXAME(EXAM_ID, LOCU_ID) ENABLE;

CREATE INDEX IN_FK_GENO_LOEX ON MODRED.GENOTIPO (EXAM_ID ASC, LOCU_ID ASC);

COMMIT; 
--

--Nova permissão para tela de avaliações    
insert into modred.recurso (recu_id, recu_tx_sigla, recu_tx_descricao)
values (18,'CONSULTAR_AVALIACOES','Permite que o avaliador possa consultar as avaliações pendentes ou atribuidas');
insert into modred.permissao (recu_id, perf_id, perm_in_com_restricao)
values(18,2,0);
commit;

-- Atualizando valores Sorologicos com o prefixo "s"
UPDATE MODRED.VALOR_SOROLOGICO
SET VASO_TX_ANTIGENO = 's' || VASO_TX_ANTIGENO;


update modred.tarefa t set t.tare_nr_relacao_entidade = (select aval.aval_id from modred.tarefa tar inner join modred.processo proc on tar.proc_id = proc.proc_id
inner join modred.avaliacao aval on aval.paci_nr_rmr = proc.paci_nr_rmr
where tar.tare_id = t.tare_id) 
where t.TARE_ID in ( select tar.tare_id from modred.tarefa tar
where tita_id = 5 and tare_nr_status = 2 and usua_id_responsavel is not null 
and tare_nr_relacao_entidade is null);
commit;

---JOB---
CREATE TABLE MODRED.VALOR_G 
(
  LOCU_ID VARCHAR2(4 BYTE) NOT NULL
, VALG_TX_GRUPO CLOB 
, VALG_TX_NOME_GRUPO VARCHAR2(20 BYTE) NOT NULL 
, VALG_NR_VALIDO NUMBER NOT NULL 
, VALG_TX_VERSAO VARCHAR2(10 BYTE) 
, CONSTRAINT PK_VALG PRIMARY KEY 
  (
    LOCU_ID 
  , VALG_TX_NOME_GRUPO 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX PK_VALG_LOCU ON MODRED.VALOR_G (LOCU_ID ASC, VALG_TX_NOME_GRUPO ASC) 
      NOPARALLEL 
  )
  ENABLE 
);

ALTER TABLE MODRED.VALOR_G
ADD CONSTRAINT FK_VALG_LOCU FOREIGN KEY
(
  LOCU_ID
)
REFERENCES MODRED.LOCUS
(
  LOCU_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.VALOR_G.LOCU_ID IS 'NOME DO LOCUS E REFERENCIA PARA A TABELA DE LOCUS';

COMMENT ON COLUMN MODRED.VALOR_G.VALG_TX_GRUPO IS 'ALELOS VINCULADOS AO GRUPO';

COMMENT ON COLUMN MODRED.VALOR_G.VALG_TX_NOME_GRUPO IS 'NOME DO GRUPO';

COMMENT ON COLUMN MODRED.VALOR_G.VALG_NR_VALIDO IS 'INDICA SE O VALOR É OU VÁLIDO (0 PARA INVÁLIDO E 1 PARA VÁLIDO)';

COMMENT ON COLUMN MODRED.VALOR_G.VALG_TX_VERSAO IS 'VERSÃO DO VALOR G BAIXADO
';

CREATE GLOBAL TEMPORARY TABLE MODRED.TEMP_VALOR_G 
(
  LOCU_ID VARCHAR2(4 BYTE) NOT NULL
, TEVG_TX_GRUPO CLOB 
, TEVG_TX_NOME_GRUPO VARCHAR2(20 BYTE) NOT NULL 
, TEVG_NR_VALIDO NUMBER NOT NULL 
, TEVG_TX_VERSAO VARCHAR2(10 BYTE) 
, CONSTRAINT PK_TEVG PRIMARY KEY 
  (
    LOCU_ID 
  , TEVG_TX_NOME_GRUPO 
  )
  ENABLE 
) on commit preserve rows;

COMMENT ON COLUMN MODRED.TEMP_VALOR_G.LOCU_ID IS 'NOME DO LOCUS E REFERENCIA PARA A TABELA DE LOCUS';

COMMENT ON COLUMN MODRED.TEMP_VALOR_G.TEVG_TX_GRUPO IS 'ALELOS VINCULADOS AO GRUPO';

COMMENT ON COLUMN MODRED.TEMP_VALOR_G.TEVG_TX_NOME_GRUPO IS 'NOME DO GRUPO';

COMMENT ON COLUMN MODRED.TEMP_VALOR_G.TEVG_NR_VALIDO IS 'INDICA SE O VALOR É OU VÁLIDO (0 PARA INVÁLIDO E 1 PARA VÁLIDO)';

COMMENT ON COLUMN MODRED.TEMP_VALOR_G.TEVG_TX_VERSAO IS 'VERSÃO DO VALOR G BAIXADO';


CREATE TABLE MODRED.VALOR_P 
(
  LOCU_ID VARCHAR2(4 BYTE) NOT NULL 
, VALP_TX_GRUPO CLOB 
, VALP_TX_NOME_GRUPO VARCHAR2(20 BYTE) NOT NULL 
, VALP_NR_VALIDO NUMBER NOT NULL 
, VALP_TX_VERSAO VARCHAR2(10 BYTE) 
, CONSTRAINT PK_VALP PRIMARY KEY 
  (
    LOCU_ID 
  , VALP_TX_NOME_GRUPO 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX MODRED.PK_VALP ON VALOR_P (LOCU_ID ASC, VALP_TX_NOME_GRUPO ASC) 
      NOPARALLEL 
  )
  ENABLE 
);

ALTER TABLE VALOR_P
ADD CONSTRAINT FK_VALP_LOCU FOREIGN KEY
(
  LOCU_ID
)
REFERENCES MODRED.LOCUS
(
  LOCU_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.VALOR_P.LOCU_ID IS 'NOME DO LOCUS E REFERENCIA PARA A TABELA DE LOCUS';

COMMENT ON COLUMN MODRED.VALOR_P.VALP_TX_GRUPO IS 'ALELOS VINCULADOS AO GRUPO';

COMMENT ON COLUMN MODRED.VALOR_P.VALP_TX_NOME_GRUPO IS 'NOME DO GRUPO';

COMMENT ON COLUMN MODRED.VALOR_P.VALP_NR_VALIDO IS 'INDICA SE O VALOR É OU VÁLIDO (0 PARA INVÁLIDO E 1 PARA VÁLIDO)';

COMMENT ON COLUMN VALOR_P.VALP_TX_VERSAO IS 'VERSÃO DO VALOR P BAIXADO';

CREATE GLOBAL TEMPORARY TABLE MODRED.TEMP_VALOR_P 
(
  LOCU_ID VARCHAR2(4 BYTE) NOT NULL 
, TEVP_TX_GRUPO CLOB NOT NULL       
, TEVP_TX_NOME_GRUPO VARCHAR2(20 BYTE) NOT NULL 
, TEVP_NR_VALIDO NUMBER NOT NULL 
, TEVP_TX_VERSAO VARCHAR2(10 BYTE) 
, CONSTRAINT PK_TEVP PRIMARY KEY 
  (
    LOCU_ID 
  , TEVP_TX_NOME_GRUPO 
  )
  ENABLE 
) on commit preserve rows;

COMMENT ON COLUMN MODRED.TEMP_VALOR_P.LOCU_ID IS 'NOME DO LOCUS E REFERENCIA PARA A TABELA DE LOCUS';

COMMENT ON COLUMN MODRED.TEMP_VALOR_P.TEVP_TX_GRUPO IS 'ALELOS VINCULADOS AO GRUPO';

COMMENT ON COLUMN MODRED.TEMP_VALOR_P.TEVP_TX_NOME_GRUPO IS 'NOME DO GRUPO';

COMMENT ON COLUMN MODRED.TEMP_VALOR_P.TEVP_NR_VALIDO IS 'INDICA SE O VALOR É OU VÁLIDO (0 PARA INVÁLIDO E 1 PARA VÁLIDO)';

COMMENT ON COLUMN MODRED.TEMP_VALOR_P.TEVP_TX_VERSAO IS 'VERSÃO DO VALOR P BAIXADO';

--ALTERAÇÃO NA TABEL VALOR_DNA_NMDP_VALIDO
ALTER TABLE MODRED.VALOR_DNA_NMDP_VALIDO 
ADD (VADN_TX_NOME_GRUPO VARCHAR2(6)  NULL);

COMMENT ON COLUMN MODRED.VALOR_DNA_NMDP_VALIDO.VADN_TX_NOME_GRUPO IS 'NOME DO GRUPO ALÉLICO';

CREATE INDEX IN_VADN_TX_NOME_GRUPO ON VALOR_DNA_NMDP_VALIDO (VADN_TX_NOME_GRUPO ASC);


CREATE TABLE MODRED.VERSAO_ARQUIVO_BAIXADO 
(
  VEAB_ID NUMBER NOT NULL 
, VEAB_TX_NOME_ARQUIVO VARCHAR2(80 BYTE) NOT NULL 
, VEAB_TX_VERSAO VARCHAR2(15 BYTE) NOT NULL 
, CONSTRAINT PK_VEAB PRIMARY KEY 
  (
    VEAB_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX PK_VEAB ON MODRED.VERSAO_ARQUIVO_BAIXADO (VEAB_ID ASC) 
  )
  ENABLE 
);

COMMENT ON COLUMN MODRED.VERSAO_ARQUIVO_BAIXADO.VEAB_ID IS 'IDENTIFICADOR DA VERSÃO DO ARQUIVO BAIXADO';

COMMENT ON COLUMN MODRED.VERSAO_ARQUIVO_BAIXADO.VEAB_TX_NOME_ARQUIVO IS 'NOME DO ARQUIVO BAIXADO';

COMMENT ON COLUMN MODRED.VERSAO_ARQUIVO_BAIXADO.VEAB_TX_VERSAO IS 'VERSÃO DO ARQUIVO BAIXADO';

CREATE SEQUENCE MODRED.SQ_VEAB_ID INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;

ALTER TABLE MODRED.TEMP_SPLIT_VALOR_DNA  
MODIFY (TESD_TX_VERSAO VARCHAR2(10 BYTE) );

ALTER TABLE MODRED.SPLIT_VALOR_DNA  
MODIFY (SPVD_TX_VERSAO VARCHAR2(10 BYTE) );
