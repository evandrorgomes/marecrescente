--Correção BUG#2414
ALTER TABLE MODRED.BUSCA 
ADD (CETR_ID_TRANSPLANTADOR NUMBER );

CREATE INDEX IN_FK_BUSC_CETR ON MODRED.BUSCA (CETR_ID_TRANSPLANTADOR ASC);

ALTER TABLE MODRED.BUSCA
ADD CONSTRAINT FK_BUSC_CETR FOREIGN KEY
(
  CETR_ID_TRANSPLANTADOR 
)
REFERENCES MODRED.CENTRO_TRANSPLANTE
(
  CETR_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.BUSCA.CETR_ID_TRANSPLANTADOR IS 'Chave estrangeira do centro de transplante.';

DELETE MODRED.BUSCA B
WHERE B.BUSC_ID IN (SELECT DISTINCT B.BUSC_ID FROM MODRED.BUSCA B, MODRED.PACIENTE P
    WHERE B.PACI_NR_RMR = P.PACI_NR_RMR AND P.PACI_IN_MOTIVO_CADASTRO = 0);

MERGE INTO MODRED.BUSCA B
USING MODRED.PACIENTE P
ON (B.PACI_NR_RMR = P.PACI_NR_RMR)
WHEN MATCHED THEN UPDATE SET B.CETR_ID_TRANSPLANTADOR = P.CETR_ID_TRANSPLANTADOR;

ALTER TABLE MODRED.BUSCA  
MODIFY (CETR_ID_TRANSPLANTADOR NOT NULL);

ALTER TABLE MODRED.BUSCA_AUD 
ADD (CETR_ID_TRANSPLANTADOR NUMBER );

COMMENT ON COLUMN MODRED.BUSCA_AUD.CETR_ID_TRANSPLANTADOR IS 'Chave estrangeira do centro de transplante.';

ALTER TABLE MODRED.BUSCA_AUD 
MODIFY CONSTRAINT FK_BUAU_AUDI DISABLE;

DELETE FROM MODRED.AUDITORIA
WHERE AUDI_ID IN (SELECT DISTINCT B.AUDI_ID FROM MODRED.BUSCA_AUD B, MODRED.PACIENTE P
    WHERE B.PACI_NR_RMR = P.PACI_NR_RMR AND P.PACI_IN_MOTIVO_CADASTRO = 0);

DELETE MODRED.BUSCA_AUD B
WHERE B.BUSC_ID IN (SELECT DISTINCT B.BUSC_ID FROM MODRED.BUSCA_AUD B, MODRED.PACIENTE P
    WHERE B.PACI_NR_RMR = P.PACI_NR_RMR AND P.PACI_IN_MOTIVO_CADASTRO = 0);

ALTER TABLE MODRED.BUSCA_AUD 
MODIFY CONSTRAINT FK_BUAU_AUDI ENABLE;

COMMIT;

ALTER TABLE MODRED.DISPONIBILIDADE 
DROP COLUMN DISP_DT_INICIO_WORKUP;

ALTER TABLE MODRED.DISPONIBILIDADE 
DROP COLUMN DISP_DT_FINAL_WORKUP;

ALTER TABLE MODRED.DISPONIBILIDADE_AUD
DROP COLUMN DISP_DT_INICIO_WORKUP;

ALTER TABLE MODRED.DISPONIBILIDADE_AUD
DROP COLUMN DISP_DT_FINAL_WORKUP;
--FIM

--Scripts para agendamento de pedido de coleta Cintia 30/01

--Alteracao na tabela PEDIDO_WORKUP
ALTER TABLE MODRED.PEDIDO_WORKUP 
ADD (PEWO_DT_LIBERACAO_DOADOR DATE );

ALTER TABLE MODRED.PEDIDO_WORKUP RENAME COLUMN PEWO_DT_FINAL_COLETA TO PEWO_DT_COLETA;
COMMENT ON COLUMN MODRED.PEDIDO_WORKUP.PEWO_DT_COLETA IS 'Data da coleta, o material deve estar disponível nesta data.';

ALTER TABLE MODRED.PEDIDO_WORKUP RENAME COLUMN PEWO_DT_INICIO_COLETA TO PEWO_DT_DISPONIBILIDADE_DOADOR;

COMMENT ON COLUMN MODRED.PEDIDO_WORKUP.PEWO_DT_DISPONIBILIDADE_DOADOR IS 'Data prevista em que o doador deve estar no centro de coleta.';

COMMENT ON COLUMN MODRED.PEDIDO_WORKUP.PEWO_DT_LIBERACAO_DOADOR IS 'Data prevista em que o doador será liberado pelo centro de coleta.';

ALTER TABLE MODRED.PEDIDO_WORKUP_AUD 
ADD (PEWO_DT_LIBERACAO_DOADOR DATE );

ALTER TABLE MODRED.PEDIDO_WORKUP_AUD RENAME COLUMN PEWO_DT_FINAL_COLETA TO PEWO_DT_COLETA;

ALTER TABLE MODRED.PEDIDO_WORKUP_AUD RENAME COLUMN PEWO_DT_INICIO_COLETA TO PEWO_DT_DISPONIBILIDADE_DOADOR;

--Alteracao na tabela DISPONIBILIDADE
ALTER TABLE MODRED.DISPONIBILIDADE 
ADD (DISP_DT_LIBERACAO_DOADOR DATE );

ALTER TABLE MODRED.DISPONIBILIDADE RENAME COLUMN DISP_DT_FINAL_COLETA TO DISP_DT_COLETA;
COMMENT ON COLUMN MODRED.DISPONIBILIDADE.DISP_DT_COLETA IS 'Data da coleta, quando o material deve estar disponível.';

ALTER TABLE MODRED.DISPONIBILIDADE RENAME COLUMN DISP_DT_INICIO_COLETA TO DISP_DT_DISPONIBILIDADE_DOADOR;

COMMENT ON COLUMN MODRED.DISPONIBILIDADE.DISP_DT_DISPONIBILIDADE_DOADOR IS 'Data prevista em que o doador deve estar no centro de coleta.';

COMMENT ON COLUMN MODRED.DISPONIBILIDADE.DISP_DT_LIBERACAO_DOADOR IS 'Data prevista em que o doador será liberado pelo centro de coleta.';

ALTER TABLE MODRED.DISPONIBILIDADE_AUD 
ADD (DISP_DT_LIBERACAO_DOADOR DATE );

ALTER TABLE MODRED.DISPONIBILIDADE_AUD RENAME COLUMN DISP_DT_FINAL_COLETA TO DISP_DT_COLETA;

ALTER TABLE MODRED.DISPONIBILIDADE_AUD RENAME COLUMN DISP_DT_INICIO_COLETA TO DISP_DT_DISPONIBILIDADE_DOADOR;

--Alteracao na tabela PEDIDO_COLETA
ALTER TABLE MODRED.PEDIDO_COLETA 
DROP CONSTRAINT FK_PECL_SOLI;

ALTER TABLE MODRED.PEDIDO_COLETA 
DROP COLUMN SOLI_ID;

ALTER TABLE MODRED.PEDIDO_COLETA 
ADD (PEWO_ID NUMBER NOT NULL);

ALTER TABLE MODRED.PEDIDO_COLETA RENAME COLUMN PECL_DT_INICIO_COLETA TO PECL_DT_DISPONIBILIDADE_DOADOR;

ALTER TABLE MODRED.PEDIDO_COLETA RENAME COLUMN PECL_DT_FINAL_COLETA TO PECL_DT_LIBERACAO_DOADOR;

CREATE INDEX IN_FK_PECL_PEWO ON MODRED.PEDIDO_COLETA (PEWO_ID ASC);

ALTER TABLE MODRED.PEDIDO_COLETA
ADD CONSTRAINT FK_PECL_PEWO FOREIGN KEY
(
  PEWO_ID 
)
REFERENCES MODRED.PEDIDO_WORKUP
(
  PEWO_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.PEDIDO_COLETA.PECL_DT_DISPONIBILIDADE_DOADOR IS 'Data em que o doador deverá estar disponível no centro de coleta.';

COMMENT ON COLUMN MODRED.PEDIDO_COLETA.PECL_DT_LIBERACAO_DOADOR IS 'Data em que o doador será liberado pelo centro de coleta.';

COMMENT ON COLUMN MODRED.PEDIDO_COLETA.PEWO_ID IS 'Identificador do pedido de workup.';

--Alteracao na tabela PEDIDO_LOGISTICA
ALTER TABLE MODRED.PEDIDO_LOGISTICA 
ADD (PECL_ID NUMBER );

ALTER TABLE MODRED.PEDIDO_LOGISTICA  
MODIFY (PEWO_ID NULL);

CREATE INDEX IN_FK_PELO_PECL ON MODRED.PEDIDO_LOGISTICA (PECL_ID ASC);

ALTER TABLE MODRED.PEDIDO_LOGISTICA
ADD CONSTRAINT FK_PELO_PECL FOREIGN KEY
(
  PECL_ID 
)
REFERENCES MODRED.PEDIDO_COLETA
(
  PECL_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.PEDIDO_LOGISTICA.PECL_ID IS 'Identificador do pedido de coleta que originou esse pedido.';

ALTER TABLE MODRED.PEDIDO_LOGISTICA_AUD 
ADD (PECL_ID NUMBER );

--- Alteração do tipo de prescrição
DELETE FROM "MODRED"."TIPO_SOLICITACAO" WHERE TISO_ID=4;
UPDATE "MODRED"."TIPO_SOLICITACAO" SET TISO_TX_DESCRICAO='PRESCRICAO' WHERE TISO_ID=3;

--Criação de tabela para armazenar os tipo de fontes de celulas utilizados na coleta

CREATE TABLE MODRED.FONTE_CELULAS
(
  FOCE_ID NUMBER(2) NOT NULL 
, FOCE_TX_SIGLA VARCHAR2(5) NOT NULL
, FOCE_TX_DESCRICAO VARCHAR2(50) NOT NULL
, CONSTRAINT PK_FOCE PRIMARY KEY 
  (
    FOCE_ID 
  )
  ENABLE 
);

COMMENT ON TABLE MODRED.FONTE_CELULAS IS 'Tabela responsável por armazenar os tipos de fonte de celulas utilizadas nas coletas.';

COMMENT ON COLUMN MODRED.FONTE_CELULAS.FOCE_ID IS 'Identificador da fonte de celulas.';

COMMENT ON COLUMN MODRED.FONTE_CELULAS.FOCE_TX_SIGLA IS 'Sigla da fonte de celulas.';

COMMENT ON COLUMN MODRED.FONTE_CELULAS.FOCE_TX_DESCRICAO IS 'Descrição da fonte de celulas.';

INSERT INTO MODRED.FONTE_CELULAS (FOCE_ID, FOCE_TX_SIGLA, FOCE_TX_DESCRICAO) VALUES (1, 'MO', 'MEDULA OSSEA');
INSERT INTO MODRED.FONTE_CELULAS (FOCE_ID, FOCE_TX_SIGLA, FOCE_TX_DESCRICAO) VALUES (2, 'SP', 'SANGUE PERIFERICO');
INSERT INTO MODRED.FONTE_CELULAS (FOCE_ID, FOCE_TX_SIGLA, FOCE_TX_DESCRICAO) VALUES (3, 'DLI', 'LINFOCITOS');

--Alteracao na tabela PRESCRICAO
ALTER TABLE MODRED.PRESCRICAO 
ADD (FOCE_ID NUMBER(2));

UPDATE MODRED.PRESCRICAO SET FOCE_ID=1;

ALTER TABLE MODRED.PRESCRICAO 
MODIFY (FOCE_ID NUMBER(2) NOT NULL);


CREATE INDEX IN_FK_PRES_FOCE ON MODRED.PRESCRICAO (FOCE_ID ASC);

ALTER TABLE MODRED.PRESCRICAO
ADD CONSTRAINT FK_PRES_FOCE FOREIGN KEY
(
  FOCE_ID 
)
REFERENCES MODRED.FONTE_CELULAS
(
  FOCE_ID 
)
ENABLE;

COMMENT ON COLUMN MODRED.PRESCRICAO.SOLI_ID IS 'Identificador da solicitação.';

COMMENT ON COLUMN MODRED.PRESCRICAO.FOCE_ID IS 'Identificador do tipo de fonte de células.';

--Adicionando status a tabela de STATUS_PEDIDO_COLETA
INSERT INTO MODRED.STATUS_PEDIDO_COLETA VALUES (2,'Agendado');
INSERT INTO MODRED.STATUS_PEDIDO_COLETA VALUES (3,'Realizado');
INSERT INTO MODRED.STATUS_PEDIDO_COLETA VALUES (4,'Cancelado');

--Criando/alterando tipos de tarefa
ALTER TABLE MODRED.TIPO_TAREFA  
MODIFY (TITA_TX_DESCRICAO VARCHAR2(40 BYTE) );

UPDATE MODRED.TIPO_TAREFA SET TITA_TX_DESCRICAO = 'PEDIDO_COLETA' WHERE TITA_ID=40;

INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO) VALUES (41, 'PEDIDO_LOGISTICA_DOADOR_COLETA', 0, null);
INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO) VALUES (42, 'PEDIDO_LOGISTICA_MATERIAL_COLETA', 0, null);
COMMIT;

--Criando recurso
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (51,'TRATAR_COLETA_DOADOR','Permite agendar uma coleta para um doador.');
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (51,9,0);
commit;

--FIM

-- INCLUIR TAREFA DE ROLLBACK
ALTER TABLE MODRED.TAREFA
ADD USUA_ID_ULTIMO_RESPONSAVEL NUMBER;
COMMIT;
-- FIM

-- INLCUIR TIPO DE TAREFA DE ROLLBACK
INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO) VALUES (43, 'ROLLBACK_ATRIBUICAO', 1, 3600);
COMMIT;
-- FIM

--Queiroz Removendo obrigatoriedade das datas para criar um pedido de coleta inicial (01/02/2018)
ALTER TABLE modred.PEDIDO_COLETA  
MODIFY (PECL_DT_DISPONIBILIDADE_DOADOR NULL);

ALTER TABLE modred.PEDIDO_COLETA  
MODIFY (PECL_DT_LIBERACAO_DOADOR NULL);
commit;
--Fim


--ALTERAÇÃO DA FUNÇÃO GET_SCORE (RODAR SEPARADO)
create or replace FUNCTION get_score( paciente_id IN NUMBER )
 RETURN NUMBER deterministic
IS
 estagio_doenca_id NUMBER;
 pontos_paciente_q_const NUMBER;
 dt_nascimento DATE;
 dt_cadastro DATE;
 idade NUMBER;
 diff_dias_cadastro NUMBER;
 cid_id_paci NUMBER;
 curabilidade NUMBER;
 q_constante NUMBER;
 urgencia NUMBER;

BEGIN
   pontos_paciente_q_const:=0;    
   select esdo_id into estagio_doenca_id from (select esdo_id  from evolucao where paci_nr_rmr = paciente_id order by evol_dt_criacao desc) where ROWNUM = 1  ;
   select cid_id into cid_id_paci from (select cid_id from diagnostico where paci_nr_rmr = paciente_id) where rownum = 1;

   -- quando estagio id for nula, devo buscar os parametros na propria cid
   IF estagio_doenca_id is null THEN        
       select CID_NR_CURABILIDADE,CID_NR_Q_CONSTANTE,CID_NR_URGENCIA INTO curabilidade,q_constante,urgencia from cid WHERE CID_ID = cid_id_paci;      
   ELSE        
       select CIED_NR_CURABILIDADE,CIED_NR_Q_CONSTANTE,CIED_NR_URGENCIA INTO curabilidade,q_constante,urgencia from cid_estagio_doenca WHERE ESDO_ID = estagio_doenca_id AND CID_ID = cid_id_paci;              
   END IF;

   select paci_dt_nascimento, paci_dt_cadastro into dt_nascimento ,dt_cadastro from paciente where paci_nr_rmr = paciente_id;

   --Recupera a idade do paciente
   SELECT trunc((months_between(sysdate, dt_nascimento))/12) AS idade into idade FROM DUAL;

   --Calcula pontos do paciente se for menor de 13 anos
   IF idade < 13 THEN
       pontos_paciente_q_const := 20;
   ELSE
       -- Calcula pontos do paciente com a seguinte regra:
       -- Adiciona 0.33 pontos a cada dia após o cadastro do paciente
       SELECT (TRUNC (TO_DATE(SYSDATE,'dd/mm/yyyy')) - TO_DATE (dt_cadastro, 'dd/mm/yyyy')) INTO diff_dias_cadastro FROM DUAL;
       pontos_paciente_q_const := diff_dias_cadastro*0.33;

   END IF;

   return pontos_paciente_q_const + curabilidade + q_constante + urgencia;

END;
-- FIM DA ALTERAÇÃO DA FUNÇÃO GET_SCORE

--Nova coluna na tabela de paciente
ALTER TABLE MODRED.PACIENTE 
ADD (PACI_NR_SCORE NUMBER AS ( GET_SCORE(PACI_NR_RMR)) virtual);
--Fim da nova coluna na tabela de paciente

--Queiroz retirando obrigatoriedade do centro de coleta para inicializar com o pedido vazio
ALTER TABLE modred.PEDIDO_COLETA  
MODIFY (CETR_ID_COLETA NULL);
--Fim

INSERT INTO "MODRED"."USUARIO_PERFIL" (USUA_ID, PERF_ID) VALUES ('9', '11');
--FIM

--Adicionando centro de coletas
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('1','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('3','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('4','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('5','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('6','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('7','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('8','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('9','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('11','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('13','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('14','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('16','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('17','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('20','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('21','2');
Insert into MODRED.FUNCAO_CENTRO_TRANSPLANTE (CETR_ID,FUTR_ID) values ('34','2');
commit;
--FIM

--Adicionando tempo de execução na tarefa de cadastrar resultado workup
UPDATE "MODRED"."TIPO_TAREFA" SET TITA_NR_TEMPO_EXECUCAO = '3600' WHERE tita_id=35;
commit;
--FIM

--Script para armazenar a avaliação ao pedido de coleta CINTIA 06/02
CREATE TABLE MODRED.AVALIACAO_PEDIDO_COLETA 
(
  AVPC_ID NUMBER NOT NULL 
, AVPC_DT_CRIACAO TIMESTAMP NOT NULL
, AVPC_DT_AVALIACAO TIMESTAMP
, USUA_ID NUMBER
, AVPC_IN_PEDIDO_PROSSEGUE NUMBER(1) 
, AVPC_TX_JUSTIFICATIVA VARCHAR2(500)
, SOLI_ID NUMBER NOT NULL 
, CONSTRAINT PK_AVPC PRIMARY KEY 
  (
    AVPC_ID 
  )
  ENABLE 
);

CREATE INDEX IN_FK_AVPC_SOLI ON MODRED.AVALIACAO_PEDIDO_COLETA (SOLI_ID ASC);

CREATE INDEX IN_FK_AVPC_USUA ON MODRED.AVALIACAO_PEDIDO_COLETA (USUA_ID ASC);

ALTER TABLE MODRED.AVALIACAO_PEDIDO_COLETA
ADD CONSTRAINT FK_AVPC_SOLI FOREIGN KEY
(
  SOLI_ID 
)
REFERENCES MODRED.SOLICITACAO
(
  SOLI_ID 
)
ENABLE;

ALTER TABLE MODRED.AVALIACAO_PEDIDO_COLETA
ADD CONSTRAINT FK_AVPC_USUA FOREIGN KEY
(
  USUA_ID 
)
REFERENCES MODRED.USUARIO
(
  USUA_ID 
)
ENABLE;

COMMENT ON TABLE MODRED.AVALIACAO_PEDIDO_COLETA IS 'Tabela responsável por armazenar avaliações aos pedidos de coleta.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.AVPC_ID IS 'Identificador da avaliação do pedido de coleta.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.AVPC_DT_CRIACAO IS 'Data de criação da avaliação.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.AVPC_DT_AVALIACAO IS 'Data da realização da avaliação.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.USUA_ID IS 'Usuário que efetuou a avaliação.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.AVPC_IN_PEDIDO_PROSSEGUE IS 'Indica se o pedido de coleta deve prosseguir.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.AVPC_TX_JUSTIFICATIVA IS 'Justificativa do avaliador.';

COMMENT ON COLUMN MODRED.AVALIACAO_PEDIDO_COLETA.SOLI_ID IS 'Identificador da prescrição.';

--sequence
CREATE SEQUENCE MODRED.SQ_AVPC_ID INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;

--criação de recurso
INSERT INTO MODRED.RECURSO (RECU_ID, RECU_TX_SIGLA, RECU_TX_DESCRICAO) VALUES (52,'AVALIAR_PEDIDO_COLETA','Permite avaliar um pedido de coleta.');
INSERT INTO MODRED.PERMISSAO (RECU_ID, PERF_ID, PERM_IN_COM_RESTRICAO) VALUES (52,13,0);
commit;

--FIM

--criação de tipo de tarefas de notificação
ALTER TABLE MODRED.TIPO_TAREFA  
MODIFY (TITA_TX_DESCRICAO VARCHAR2(50 BYTE) );

--tarefa para analista de workup
INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO) VALUES (44, 'NOTIFICACAO_PEDIDO_COLETA_AVALIADO', 0, null);
--tarefa para o medico
INSERT INTO MODRED.TIPO_TAREFA (TITA_ID, TITA_TX_DESCRICAO, TITA_IN_AUTOMATICA, TITA_NR_TEMPO_EXECUCAO) VALUES (45, 'NOTIFICACAO_RESULTADO_AVALIACAO_PEDIDO_COLETA', 0, null);
COMMIT;
--FIM